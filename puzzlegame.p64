picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249NDcyOF1dbHo0AMUaAAAefAAA-xB7WzBdPXtibXA9cHh1
AEMgEBAE-w8Cty4XnhceB74HBAAS8wYXnhcut-4CLGZsYWdzPTAscGFuX3gIAMx5PTAsem9vbT04
fSxnALA1Bz4HjgcOBx4HDggAQxcOB65VABGuDgAGHABPPgf_NV8AHlgjnyhfDwQAVx8oXyYfCAAZ
nwQAP-8PI2MAGY8gIATw----8zQACx43lwD4ABIPNZ8rDzU-Dw8WnzIPLggAUz8yHxY-DABTLzI-
Fi8MAF8fMl8WHwwAAAgkAAg8AAtYAIsunzEPMP8PEqsAgy0xLjM5NTgzAQAUNroAUi4yOTE2AQAe
N-oAD8YAHUIPFhoOpABxDh8yDjoOHQsAFR0KAFEtDhoOLQoAMT0ePQgAFp0GAA_7AG1BDz4PEAoA
A3sBABIAIAcOFAAYHxQANhAOHRIAADgAIh0MNABRDD8yHDsJABabBgAP1QBEzxeXDj8PDzieDw4B
LwgAN783nx4POQE-D7H9Aa8AUoMuDzcfHg83Lg8AhB4PNz8eDzceDwAuXx4LAAwlAAtDAA-RAGxP
Ph8ePpkAAz8uPx7nABEFFgAPyQBsD6QACEUfHh4dDQAXHQwAJl0ePQAkPQwNAApaACIMnccAH-vH
AFQAgwEUTg0AFz_QAQjSAAbdABAu9wAEDQAQTsIBBA0AD5ABUS-w8EwAgBAgYQH-BDIGx88cDz4-
Dw8jzxzPPg8QAS8LAFLsJM8RzyUPPwE-D-EM-hHSAFMzLjYyNcgARi05LjTeAALJABozFQEQICoC
QAaXDxzHAG_fHA8_AS8JAFskJJ-XAA8JAFgiEZ9BASyx-qoCZTIuMTg3NQgCMzYwNAkCTzcwMDRC
AQEQIEIB-wAyDyv3Cgs-Dwr-GgoDAS8IADdynxoPKesPGwsAIwPxCABPAf8PAwgAVc0PKpsPGwH-
DwSx-iEsARc2XwITMzUBYzIuODc1MAEALzMzNAEJXJcL-w8EcQAPCABYLwvntAFAbg8q_woPG54D
DzIBLx9CMgFpni8PDyvnDyqfGvQADzQBiQ_aA0VQDyrrDxsNATk-D_EoAQ_bA2MPNQE2DyYHAWYz
MjAuMzFWBkcxNDkuNgcCRwAfMUcAzxBA9gf-A3IPOPcqDzo-Dw85-zoqDzsBLwoASVAY-x4qAhgD
Oyz_McEAVC0yLjM1ngYAqAgCyQA_Ny4z5AEaNQ8BEUAfCiI4l8cAI586dgAPCQD-7k8Ynx4CFQkC
KC03awIEagJHMTAuMWsCAmoCHzIyA4lnMTEuNDM38wMO8gMfNCoD--8tD50GJQ9HAP8FAsMJ7wf2
Cg8gPw8G-yEKBQEvCAAvYc8hHz6vIQsAdL8hDz4HHp8NADMuDxAMAGXPIQ4PEAEZAAANAAMzAGKv
IR4PEL8MAHGfIQ4HHgGtDABDnS4PEAsAEK0vABG9CwBf-QoFASwGABe8DyD1Cg8VATzxDPzTCSkt
MPAHBfEHLi0wRgEfNQkLAe819woIPw8PK-oKDxkBLwkALzSKcYoKAEUxHz4RDQAwEQ8nVQEYAREA
ABwBBRAARjEODxAvAABcARUhDgAoER4OAEcBDgceDgAZLioAXQ4PEDGKjAAv_goJACifCvkKBAE9
8Qz9fQE3EBAmGRvxTwAKCQMPphEAHjROAw9DAP84Ar4T8QoPFz8OHzbfDh82Pw4PGD8PDw4-GB82
Dw7PBgBALxgPNhoCQw7-GAoKAFS-GB8zvxcAgq8YDzMQDzavEAD-AB82jxgPMzAPF48YDzYPMxIA
A8YOnxgPNhAPF58YDw5TAC4Xv2oAD4kAAb8YPzYfM982HzNPNigPAxkzBQFLMC4yMAUBHzf6EwAC
BQEKAQEF_wAfnwkABTYfNn-oAAYLACYOf9oAL58YCQAGVD8YHzM-DQASL0gBBXQAEh82AR8fEAAF
Ei9EARcvTQAuFz9sAA8JAAUPugAiHj_JAS5PNv8HD4QBH-AgMDAE-w9S9xsGPvcaBgUBLvcZBhUB
LvcYBiUBLvcXBjUBLvcWBkUBLlcN9Q0NBg0KAFD1DgYHVQgAMQ0GFwgAMQwGJwgAMQsGNwgAMAoG
RwgAQVXxBFcIAD8B-gMJAJRARQb3CggAQDUG9wsIAEAlBvcMCABAFQb3DQgAQA0G9w4IAP0eBvcO
BlUBLkcGDfUVAS43BvUXAS4nBvUYAS4XBvUZAS4HBvUaAS4G9RsBPvEctRQZNKMBHzHJCA4REicD
UCOfKw8kPQdInyQPEQgAXz8kHxE-DAAAXh8kXxEfDAAPMAAGH58IAAxODxEPJAQAJD8PCgAPGgAA
PyMPEAQAAS8fDz4FHRk2EgEQEj4F8AAWDyPfKw8jHw8PK78kHxFWAEIPK98kEgAA2AAVXxYAAA4A
E38aAAAKARU-GgAADgAfXzQADg1gAI8k3xEPEP8PFMcAK08QEgQfJAEGAT4BBUwBC1gBD4wBBy8r
nwgADA-_AQUPLgIsPiSvEU0fDxABDh411wERFNcBsCQfDw8QHxG-JA8RIwES3wgAEhChARM-FgAW
fwwAEBAKAAK1AAAaABZfDAAPNAAKDGAAX_8R-w8WxQAuP-D-EUQAKwEuC6BGDB8_-w8LDE8_awJg
CAwPPgxOCgBQBgwOFwwTIaA--w8FDgwHDxxeCwBSBAweDG4WADMDDJ4JABWuCAABIgASjg8ARQQP
HH4KAEA_PxAfSgCwBx4vEC8--w8GBw4QAFAKDxwHDiMAcAYcHgwPHB4LADIFDI5IABAOagABCQAx
FwxeCgACiAAgHxB9AAaIABquCAAgBJ4GAFAFDxB_DQkAMQYdTggAvwgfPy0b-w8LK-pGNwEdD6sN
AB83NwEwFL6uAAA5ABAEsAABIwEAsAASHLsAUB8-HQ4bDgDwHg7-DwcrDRsNBwz6DQ4MDxwM_g4M
BwwO_g0MCRwOHB76Bw4MBwkMTg36BgwZBwgAkAUODCcMPg0L_kcBUQcJXgv6gwBgDQv6AwyeBgAQ
rhwAkJ4L_gUNfg0L_iUBvwv6CBstG-oLK-o3IQEsETAvJTv---VIADYxLjhIACYwLmcMHze9CgEQ
MGgBYHIJny4PL7ADny6fLw8xAf8PEwoAF0QPLwl_DAA1DhluCwAlKV4LACQ5TgsAEp4JACAOrwcA
8QoUsf2DCf8uCg79BAz_Cg8xAf0DDP4FOQ4LCQAjBikJACMHGQkAIwgJCQAfCgcADa8O_wsB-QTx
DP0xZQEuM-8PMh4BFQT2AB8DCgAXRH8vCQ4MACVuGQsAJV4pCwAlTjkLAAIeARIDHgFwBLH9cwmf
Lh0BEp4cATEOOU7kADIOKV4IACIZbggAIQl_CAAfngYAaY8OqwH9BLH9EXEBKwGPAhBiFQIDcgE0
-y8KHgEPCwAZVA8vCf4IDQBFDhn_BwwANSn_BgwANDn_BQwAIv4KCgBADv8xC30BQfEM-YN_ARIU
fgExEwxOmQJCEwxeKQgAIm4ZCAAifgkIAB_eBgAJAB4BTxSx-UGPAkMPCgC3Dy8Ddg7PAg-9ByEO
XhAPQwD--zjPCBAEHw8vJz8PDycvBAAIPz8PHyQAEF4vJ-8PHBEeNzY4N34QLzc1fhAKAZEASis_
Cy4CAIoPJh8nDyYuCwIAPz4r-nAAMgQBAYILLg8nLgsuDQQARD4dDyYMAAUUAC8t-uIANAhqAAEE
AEcPJhsMDwABBAAvPitvAEUuPhvdAA9PATkpCy4CAAFvAC8PJ00BRQq5ASIuDU0BBg8ADt8AD28A
QBoLAgAPvAE9D5kCVSwLLnsDEBtkAA7cAA9uAEcB8QAWDAQALz4s6AM5QgsPDwuzBGArDi8PCy0C
AGMOPRs9Di0MAL8rDi0OCw0LDj0u-XcAMrIPKg8rDyo-Dw8qLwQAGysEAAQYAFcmHyoPJhAAGysE
AAEYABM-UAAPbAU08gUvMD8PDzAfDwoPMC8PDzAPDwoPMQsAMBoPDwkAMBoPMQkA-w8-Dxo_DzAO
DzEaLg8wDhoNLg0PMQoODS4NCh4NPi2IBT8xHg8mBwARCzkEkA4LDg0_HyY_DQkAkS4MCx4NLgsM
HvwCD30AO0IPDx8_HQIALxwhLw8mHAEPAEAPDg8Q5gYQDooT-woAHg8QAC8PDgceAC0uDxAALQAO
DA0APS8nMgIvwQgELw8nFg4XQAZgBQIAbQ4FUA4FUKAPYjQwMzQwOQIAHjH6Gw9nGgRvCAgEdvAo
TQA3oCYFPw8wFR5QBQ4DABAGAwBvQAceQAceYwA3UHAPDwAOAgAREAYAMgCeAAgAL-4IZAA3dW8P
BW4GbgcCAB8GWwA3EABcAAgCAA9bADQwIAwEMwTQ_wgOPw8OGw79Bg4bDh8D0P0KDgsOCw4dKw4N
Ow0UAMArDg0LHQsdDhstCx3XBAIHAAIEADAtGy0tAEENKx07EwBMDhsOLSgAYD0LLRsOHQ0AAiQA
dCsOPQsdDgtrABQNfQB-PQ77CA79E98AJhw5OgFFYgACYAIAH_BYADfxAj8PJwYeFzAOB1AOBlAP
IWANZwMPYAAnD2EDOQ1NALIWHyE-DzAPIQUfD2UDImAFAgAPYwA08A4QEARPD1N_k06zLtMekwsH
Ew6TCyejCycLQwcLIwcA8AMnCwMLJwtTCycLJwtzC0cLUw4XAO9THjMLBwtjLrNOk35TTowAJh43
iQMpBm4CAA9KATceBYkDD0IBNf8CPw_3HievIQ4PIA84zyEPIO8EABLfDg8g3yEeLxWvIT6-FY0A
Jg0UDv0Dtz8PryEnHw-PIQ0FDw-vIQXuAgD-AM4PJQUPD64vFR8PvxU-D3wANABkAQGcAv4DDzwF
UA8PBVAODzwVMB4dNT494zQHFQc8Ni4wXxYNGAJf8CB1fzxGAC4AnAAwIWAOmQD-BlAGDw8wFw88
Dw8FHgYfPB8PPzw-D6cALx8wQwAuBQIDz14GAF4GAE4FED4FIFYALgX9As8AB14AB14QBk4gBT5W
ACsB_AJRbyhvDx8EAP8CPw8PKK8PDygfDw8ozw8PKA8IACwTH1AAEz9gAH5vD28o-w8FtAAWN7QA
PDEuMbQAD6wDAO9rbhtuGz4LrgseC84LDgQADL8eC64LPhtuG25r-nwAM2urPsse6w4CAE8eyz6r
YgAvYAgIBA84ZoUErFYfIA84Ri8gTw8EAA-0AQoBUiYPPRYK8wAICARmDVYNBUYNFU8PJU4CAA9V
ACz1E6QSBA8P84bO84i_Q18nQz2DXXNdYz1zPQM9c11DvRM9Mz0EAPIBviOdIz1jnTOdQz1zrTOd
Ix4AI00jHgABBgAhPVMGAHEzPTM9c10TCgARkwYAPxNdEygABShNIygAL20DKAAAIJOdIAAFJAAf
vSIAEUAjPSO_CAB4U70TPbM9cx4Abz0DbRONQx4ABiETXR4AbT2TPVM9kx4AIyNNXAAPIAAEHzPA
AAARMwYAADIAAg4ADyoAJfUEI50zfROdM51TfSM9o50znTOdIxwA9QRDXXNdM11zXZM9Qz3DXXNd
c11DHABs84jO84bOKwJGNDkuMGkEBO06TTEzLjTHLwoAC-UTVAoE8x7-Jw2PDxM-JxMOQz4jPjMO
Mw4DHhM_Ew5TDgM_AwQAMI8PAxoAIw4zBgBSA14DHiMIAAEgAJAjHgMOAy4DHo0RAFEzXgMOcysA
BiEAAS8AcS6NAw5TDjMEABQjIQACHwAEBAAARAD0BRM_Iy4TPiM_Qy4DDkM_Ex4zLjMeIQBtjfMe
-g39bB3mMy4xOTEwNzE0Mjg1NzJ1Hc83MDIzODA5NTI0MTQ5AwIgqA45A-ABS-8nKf8PA-8bTP8n
Kv8PAkQD9QUeo15zXoMecx4TPkNeQx6zHhN_EwQA8RD-DwIvG54tHo2ePZ5tHn0eDU4tni0evR4d
fh0ePV4dCACg-w8CEz4zPhMecwYAAAQAQr4TTkMIAAFFAOBTPhMeE24jHvwCHR59HgQAAgYAUh2_
HS5tCAABSQAwHR49fT5QTj0u-AI8AIFzvhMe8wAecwIABE0AgBM_Ux6DTvwCNQBhfb4dHv0AUAAH
RgDBXj0ejU78AhMesx5zBAAUU0MAAkEABAQAwE4zLvwCHT49Ph0ubQYAQD49Pl2QAAAMAEEeLV4t
BAABUgD0Cm4tHvwCI54zbiOeM55zbhMeg54jLpM_ky5MAPIJ-AJNXn1OTV59Xr1OHR6tXk1OXX5d
Th1_kgDs-ALzTP4q-AP9S-4p-APXAnI2OS4wNDgy0wElMTTCBSA1M9ABAdYBLzU31wIBD9UXAS8t
MUQQHKQKBA8oOw4fD1sdAgBfDjsO-QpXACzvEBAEDzjGDQ8PDyDPIQUHAESPIc8VDyX-DwGsAB4c
NqgGBPIGCAQAzx8gDyFBDyAPIVEOYToZCTYwLjBgAA9xPwU3CAgEBAefQQ8lFVENBWENWAAxoB8P
K04vJz47TisCAD8_S55VADERa-kU8gArDgsPDxsOCw4bDSsOKw0KAI8LDisOCw1rjWcAMYBLLw9L
LgsvJ0QQEksEAG8uPQsuS45dADRgGw8nGy8PYQACygDPGw4LDUsOCy0_Cy1LwQAyAO8T0BsOLw8O
Cw5NCw5dC03sEG8LPStdC81fAC4A3wP-EFYH4BfQJ8AXARAXkAEHIBGQAQAn0BcBwBcBsDfAMQCW
Cx0NZgrh8EVHoBcBFwGQByEHAZAKAG9HAaBB8EVaAC8FuwDwAtABBwBFgAEARQGQBSEFAZBFAwAv
oEFiADxgSIABAAgBAgBjkBgBGAGQDAAfSGoALv4BBQUEDw8rDgsuGy4LDitOC04AVDc5ODYxAQAF
qzwWNzwtD1kABiILL18DIg4LAgAfXl0AOY8PD2seC047TlQAOb87Dw8LLksOCy4LTqsAO2MbHgse
Cw4EAD8eGx5eADwgPgsCAD8uKw5YADkwK08PqwA-Cz47VwA_by4bPgsOKwYBOhAfZAESDmQBTzs_
Cw4XAj0QPlUALzsOFwI_Pz4rHhMCPxM7dx4-PgsuyAJALh4bswAPXAA2Lys_WgA6YQ8HBC8PjzsR
M48PH1MRAKMREU8UAAJnEQIcAG8-D48oLw96ADvviz7LDvsETvsEDss_iy7WAEkRXwQAkx8oTw8v
KE8PHxAAD94AT0FrDssuBgAP4AA5ECAQAjcvKC8EAFGfDw8oL9AABggAE08hEwwYAAD0ALkfDx8o
vw8-KB8PTxwAE884ABEvWRMEXAAPugAoHDfKAhEvqxMCYgAGDAAPegE28AUICARfFR8oPxU-KC8V
TygfFV8oDwQAIA8PEgCPD08oLw8-KD9wADrwAx8oXxU-KD8VTygvFV8oHxUPD3QAAGgAAAYAAEoD
Lz8ocAA2AYcZ8B5fJX8PHyVfEB8lTw8PJS8QFx8cLxAPJS8PHyUPEBc_HxweDyUfDw8lDgceDz58
H5YODyUPDx8lDg0CADYsDg0CAHYeDA8NHg0OAgB3Cw8RDwwNCgIAow8RDxMPJAoJCg0CAGgJCh8T
CgkCAGMIDw8IDyMNALEKCQYJCB8PCBYJBgIAYCYIJQgmGQgAf0UYVhh1WEUTASgfOBMBAKAkfw8P
JB8jbyRPVzT-NyMXDk8kDg0vDw0OFw5tDg0cDhcOnQwNDgcO3Q69DxHtCw8N3QsK3Q8TC80PDA8T
DAu9CRwLvQksC40PDAlMG00IGXwrKUyjADkv8PBOADa-CBAEDyNtAGEAAWACAAFvYQ8QbyVwbgA5
b20HYQVQAQMADG9hBW8lDxN4ADe-BBAEPTHwHDE-JTBUACgN7g8RP94GEy8QBAIcBAAmBAAuBAA2
BAA_BA8eBDkmPw94BBMPHAQAJgQALgQANgQAPgQPcAA28QVEBQQ4Lw8oHgheKB4ILgguSB4oLgIA
sR5IDgguCA4ITghOCAARLggAAgoAABYAf24ILjgeGD4eAAJ5DhgeGF4ILkAAEQ4MAFEuSA44HhAA
AEAAAmoAAA4AFV4_AACAACw_CPsGNzYuN3AqBPUSYzQuMDMwNQEALzg5wAEBEET6BkEoHjgu3wAy
Hig_fwAYOOMACAQAGW4OAAHnAAEwABQeFAAmGF4MAATpAAVIAFseCA4IHkQABFYAAnYAcT4IPig_
OC6SAA-pADoOMQQPhwIqTxAEfw8zBA4PbwA7DzQEGA95ADYQBDobAzUED1UANvAHICgEjw8G9wQG
jgYHDyT-IwIXAG4GFwoAYwMHAF4GJwoAM04GNwoAMz4GRwoAMy4GVwoAMx4GZwoAMw4GdwoAIwaH
CQAiB58IAHAX-QsXAPcPAwDxBkcLBwv3BwA3DysrDPcGADcLDAcMCwkAsPcKADcMGwz3BwBnIgAS
JxoAUAcAJwwrFQAQNzkAEwhGAE8PNQcGAgAIEwonAPIHZwn3BwBXCQ8K9wcARxn3CAA3GQj3CAsA
NUcIGRYAgQgJ9wkANwn3OAB-BvcNBgAO8EoJKR4xaAHBBf8hBAWPDwUPIQX_EiUQHggAMF0FLgcA
ME0FPgcAMD0FTgcAMC0FXgcAMB0FbgcAMA0FfgcAIAWOBgB-DpX_BAD_DwMAPG8F-g0FAA3yADgJ
zCgEBAAQB80o8AwFBy4NHgcFPg0FBy4HHgcFLgUHDgcNLg0FBwXOCS4FDs4oD5cLHA5uBA9OAP9y
vw8j3QcA0QUAAbABBQAmXtEFDxDfVgUPmAAnQAYGBD_JA-8ADgUHFQcFBwUeBQcFPgWOYAAoLzEw
RwE6HzZOAP_E-wP-DzUK3hrOGu4a7hrOGt4K-kteADzwDA8zOA6PDw4IHQoOCA59CB0aCA4IfQgN
GggODQgAMA4IGggA-wQOCBodCH0OCA4KHQgOjQ44Dv01ggE7D04A-----zTzHwHYEAgQeBAIEAgg
WCAIEBggOCAYECggGCAoEDggCBA4EEggWBBYIEgQOBAIIDgaAAImAAIyAAI_AD-Y8AGXADsv0xAC
AAYFawAfMZ4BOw8ACP_5HyhPADsfJjoBOw9yCv-D8AkBxg8hHw8PIAaeDyEPFR8PDg8hBn4NDxW6
OGIOHQZeDR8LAFItBj4NLwsAUj0GHg0-CwBDTQYNTwoAQQ8VBUwKAHA9DB8wBTwLNAD-Egw7BSwL
Gg4dDFsFHAsaDg0MewUMCxoODJsFDBoMuwX6AWgBOw9OAP------------------OFBtPTZ9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTI3IDEzOjIzOjQxIixtb2RpZmllZD0iMjAyNC0x
MS0yNSAwOToyMjo0NSIscmV2aXNpb249NDA0XV1sejQAyAAAADkxAADzFHtbMF09e2JtcD1weHUA
QyAQEATw8CxmbGFncz0wLHBhbl94CADHeT0wLHpvb209OH0sMQDvBQUEACcAByAXIEcABzA6AAsp
MTI7AP8RCgoEEFcgdwAXEBcQRwAnAGcAdxBXADcARzAnAHcgVxCHABn-BQYHBFcwFxAHEAcAJzAH
EAdABwBHQAAODvgADzEA--------------------------------------------------------
--------QlBtPTh9fQ==
:: gfx/bp_library.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTI3IDE1OjA4OjUxIixtb2RpZmllZD0iMjAyNC0x
MS0yNSAwOToyMjo0NSIscmV2aXNpb249MTE1XV1sejQAuAAAACsxAADzFHtbMF09e2JtcD1weHUA
QyAQEATw8CxmbGFncz0wLHBhbl94CADHeT0wLHpvb209OH0sMQCvBQUEYAcgJyAHYDYACykxMjcA
cAkHBDAXABcEAL9QByAXUDdABxBXgHkAGf8FBgcEVzAXEAcQBwAnMAcQB0AHAEdAAA4O6gAPMQD-
--------------------------------------------------------------9CUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIsc3RvcmVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Il1d
:: includes/
:: includes/enias_font.font
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTIxIDA5OjQwOjA5Iixtb2RpZmllZD0iMjAyNC0w
NC0yMSAwOTo0MDowOSIscmV2aXNpb249MF1dbHo0ALEDAABgBwAA8lhweHUAAygACAAABBcI8G1v
PyAuQA4PMw5ADQwNQA0ADUAtMA8wDzwOCw8wIAMPDw4KAxAPPjZAPzAPPgAPYw82DxwPPggJCDAP
GIAMBVAcIB8KQA8EDwoPBLBGAAYADxsPEmAPCg8fBADwaxAPHg8rDwsPHg8oDysPHgAPIw0FDAYN
DzEABg8JBg8pHxEPLgAvBEAPHAYiBgQADw4FLxAFDw4QDxIMDgwBIB8EDx8fBGAHAjAPHoAWABgM
BwYSAAsdDzsPNw0LAAZMCwALDQ8wBAYDDgALDQoFCg0LAC8bDiUADhMLDADxLAsNAw8fHQsADhoF
Dz4cAAsdCx0LAAsdCQoFDCATABMgEwACDwEADxAIBwIHCAEQCwALMAcIAQ8gAQgHUADgDAAMAAsP
Iw8pDzUPKQM7APEQDi0ADx8dBB0EAAtDCwAETQQADg0DDw8DDQ4ADhMEI3IA8Vg7HQsALQ4tAAtM
CwAOOg0LAC0ELQBTDgAPNx4PKy8jAA0PNw4POy0ADk0OAAQtBBMACx8jDysNCw8gAAQdBC0ACRML
GgQADlwAXQsATQsMAB8jLysODxYAHQsMCx0ALQssAA4KBQwP9QDwIkYLABIGBwwYAAtFCwAHDwoP
EaAOAAIHUAsNCgkdDy4AAwQ9Dx0ACw0jDQsACgk9Dy7EAPABAw0LAA8cDzYGBCYADy4dCSsB8BQD
DxsPNz0ADAAPDiwLAAoADzgaDQsAEx0EHQBWDxwADxYOH7wAgQRdAAtNCwALtwAwPQsK8AEgN0P3
AAFxATAWBBYhAuAAXQ8uAE0PEgwALyMvK7sAwQ8SDAEdAD0JCgsADgIC9hcOAAUXAhcFAC8BACgA
Bh8IDxAfCAYADwoPBWAfAxwgb38AD1UPKgQA9gwAD0EPYw9-H10PdwkACR9jD3cJD0EJAA8RD0QE
AKAABwwPfAkEBQ8Q4ABgJh9fD38JvQBAIg93HwoAUA8IAA8q_gAhD3fIAvACKgAfHAkPXQ8cHxQA
DwgPHAkwALEqDzoACQ9nD2MPZ2MAEQl2APIHfw9jCQAFD3gvCA8PDwcACQ9jD2sPY4QA9AkIDxQP
Kg9dDyoPFA8IMA9VMAkPcw9jD3MeADEcD391AIEiEA9-DyIPFDEAgSIPfwAJD3cfRADzAhAPCgcA
D1APIBAPEQ8qD0QABwByCQ9rD3cPa0kAMX8AAwIA9AJvVRAPfg9CD1IPSg9CD34QAQwAQAEQAQoK
AB8KCQD---9oUA9KCgEA
:: includes/error_explorer.lua
b64$LS0gIyBwaWNvdHJvbiBlcnJvciBleHBsb3JlcgotLQotLSBieSBraXJhCi0tCi0tIHZlcnNp
b24gMC4wLjQKLS0KLS0gYW4gaW50ZXJhY3RpdmUgZXJyb3Igc2NyZWVuIGZvciBwaWNvdHJvbi4K
LS0gb24gZXJyb3IsIHNob3dzIHRoZSBzdGFjaywgbG9jYWwgdmFyaWFibGVzLAotLSBhbmQgdGhl
IHNvdXJjZSBjb2RlIHdoZW4gYXZhaWxhYmxlLgotLQotLSAjIyB1c2FnZQotLQotLSBgaW5jbHVk
ZWAgb3IgYHJlcXVpcmVgIGBlcnJvcl9leHBsb3Jlci5sdWFgCi0tIGluIHlvdXIgcHJvZ3JhbSBf
YWZ0ZXJfIGRlZmluaW5nIHlvdXIgYF9pbml0YCwKLS0gYF91cGRhdGVgLCBhbmQgYF9kcmF3YCBm
dW5jdGlvbnMuCi0tCi0tIHByZXNzIGB1cGAgYW5kIGBkb3duYCB0byBtb3ZlIHVwIGFuZCBkb3du
IG9uCi0tIHRoZSBzdGFjaywgcHJlc3MgYHhgIG9yIGBzcGFjZWAgdG8gdG9nZ2xlIGZvbnQKLS0g
c2l6ZS4gY2xpY2sgb24gdGFibGVzIGluIHRoZSB2YXJpYWJsZSB2aWV3IHRvCi0tIGV4cGFuZCB0
aGVtLgotLQotLSAjIyBob3cgaXQgd29ya3MKLS0KLS0gaW4gb3JkZXIgdG8gY2F0Y2ggZXJyb3Jz
IGFuZCBpbnNwZWN0IHJ1bnRpbWUKLS0gc3RhdGUsIHRoaXMgc2NyaXB0IHJlcGxhY2VzIGBfaW5p
dGAsIGBfdXBkYXRlYAotLSBhbmQgYF9kcmF3YCBmdW5jdGlvbnMgd2l0aCBvbmVzIHRoYXQgY2Fs
bCB0aGUKLS0gb3JpZ2luYWwgb25lcyBpbnNpZGUgYSBjb3JvdXRpbmUuCi0tCi0tIHdoZW4gdGhl
cmUncyBhbiBlcnJvciwgaXQgdXNlcyBsdWEncyBkZWJ1ZwotLSBsaWJyYXJ5IHRvIGluc3BlY3Qg
dGhlIGNvcm91dGluZS4gYSBjb3B5Ci0tIG9mIHRoZSBlcnJvciBpcyBhbHNvIHByaW50ZWQgdG8g
dGhlIGNvbnNvbGUKLS0gd2l0aCBwcmludGggaWYgeW91J3JlIHJ1bm5pbmcgcGljb3Ryb24gZnJv
bQotLSB0aGUgY29tbWFuZCBsaW5lLgotLQotLSB0aGUgZm9sbG93aW5nIGRlYnVnIGFwaXMgYXJl
IHVzZWQ6Ci0tCi0tIC0gYGRlYnVnLmdldGluZm9gCi0tIC0gYGRlYnVnLmdldGxvY2FsYAotLSAt
IGBkZWJ1Zy5nZXR1cHZhbHVlYAotLSAtIGBkZWJ1Zy50cmFjZWJhY2tgCi0tCi0tICMjIHZlcnNp
b24gaGlzdG9yeSAKLS0KLS0gdmVyc2lvbiAwLjAuNAotLQotLSAtIGFsc28gY2F0Y2ggZXJyb3Jz
IGluIGBfaW5pdGAKLS0KLS0gdmVyc2lvbiAwLjAuMwotLQotLSAtIGF1dG9tYXRpY2FsbHkgY2hv
b3NlIHRoZSByaWdodCBzdGFjayBmcmFtZQotLSAgIGJhc2VkIG9uIHRoZSBlcnJvciBtZXNzYWdl
Ci0tIC0gbW9yZSB0aG9yb3VnaGx5IHByb3RlY3QgZnJvbSBlcnJvcnMgaW4gZXJyb3IKLS0gICBl
eHBsb3JlciBpdHNlbGYKLS0KLS0gdmVyc2lvbiAwLjAuMgotLQotLSAtIGRvbid0IHJlZ2VuZXJh
dGUgc3RhY2sgaW5mbyBldmVyeSBkcmF3Ci0tIC0gc2Nyb2xsIHN0YWNrIGFuZCB2YXJpYWJsZXMg
bGlzdCB3aXRoIG1vdXNld2hlZWwKLS0gLSBjbGljayBvbiBzdGFjayB0byBzd2l0Y2ggc3RhY2sg
ZnJhbWVzCi0tIC0gY2xpY2sgb24gdGFibGVzIGluIHZhcmlhYmxlcyB2aWV3IHRvIGV4cGFuZCB0
aGVtCi0tIC0gZXNjYXBlIHN0cmluZ3Mgd2hlbiBwcmludGluZyB0aGVtCi0tCi0tIHZlcnNpb24g
MC4wLjEKLS0KLS0gLSBhZGp1c3QgY29sb3JzCi0tIC0gY29kZSBjbGVhbnVwCi0tIC0gdXNlIGBi
dG5wYCBpbnN0ZWFkIG9mIGBrZXlwYAotLSAtIHNsaWdodGx5IG1vcmUgdGhvcm91Z2ggYHJlc2V0
YAotLSAtIGRvbid0IHNob3cgdGVtcG9yYXJpZXMKLS0KLS0gdmVyc2lvbiAwLjAuMCAocHJlcmVs
ZWFzZSkKLS0KLS0gLSBpbml0aWFsIGRpc2NvcmQgYmV0YQoKLS0gIyMgbGljZW5zZQotLQotLSBD
b3B5cmlnaHQgMjAyNCBLaXJhIEJvb20KLS0gCi0tIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50
ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKLS0gb2Yg
dGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUg4oCc
U29mdHdhcmXigJ0pLCB0bwotLSBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0
aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZQotLSByaWdodHMgdG8gdXNlLCBj
b3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQv
b3IKLS0gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMg
dG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKLS0gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRv
IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKLS0KLS0gVGhlIGFib3ZlIGNvcHlyaWdodCBub3Rp
Y2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KLS0gYWxs
IGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi0tIAotLSBU
SEUgU09GVFdBUkUgSVMgUFJPVklERUQg4oCcQVMgSVPigJ0sIFdJVEhPVVQgV0FSUkFOVFkgT0Yg
QU5ZIEtJTkQsIEVYUFJFU1MKLS0gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRF
RCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCi0tIEZJVE5FU1MgRk9SIEEg
UEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxM
Ci0tIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENM
QUlNLCBEQU1BR0VTIE9SIE9USEVSCi0tIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04g
T0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HCi0tIEZST00sIE9VVCBPRiBP
UiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIKLS0g
REVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLS0tLSB1dGlsIC0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxvY2FsIGZ1bmN0aW9uIGZpbGVuYW1lX29mIChwYXRoKQog
IHJldHVybiBwYXRoOm1hdGNoICgnW14vXSokJykKZW5kCgpsb2NhbCBmdW5jdGlvbiBzYWZlX3Rv
c3RyaW5nICh2YWx1ZSkKICBpZiB0eXBlICh2YWx1ZSkgPT0gJ3N0cmluZycgdGhlbgogICAgcmV0
dXJuIHN0cmluZy5mb3JtYXQgKCclcScsIHZhbHVlKQogIGVsc2UKICAgIGxvY2FsIHN1Y2Nlc3Ms
IHZhbHVlX3N0cmluZyA9IHBjYWxsICh0b3N0cmluZywgdmFsdWUpCiAgICByZXR1cm4gc3VjY2Vz
cyBhbmQgdmFsdWVfc3RyaW5nCiAgICAgICAgICAgICAgICAgICBvciAoJ2Vycm9yIGR1cmluZyB0
b3N0cmluZzogJyAuLiB0b3N0cmluZyAodmFsdWVfc3RyaW5nKSkKICBlbmQKZW5kCgpsb2NhbCBm
dW5jdGlvbiBnZXRfbGluZXMgKHRleHQpCiAgbG9jYWwgbGluZXMgPSB7fQogIGZvciBsaW5lIGlu
IHRleHQ6Z21hdGNoICgiKC4tKVxyP1xuIikgZG8KICAgIHRhYmxlLmluc2VydCAobGluZXMsIGxp
bmUpCiAgZW5kCiAgbG9jYWwgbGFzdF9saW5lID0gdGV4dDptYXRjaCAoJyhbXlxuXSopJCcpCiAg
aWYgbGFzdF9saW5lIGFuZCBsYXN0X2xpbmUgfj0gJycgdGhlbgogICAgdGFibGUuaW5zZXJ0IChs
aW5lcywgbGFzdF9saW5lKQogIGVuZAogIHJldHVybiBsaW5lcwplbmQKCmxvY2FsIGZ1bmN0aW9u
IGNvbXBhcmVfa2V5cyAoYSwgYikKICBsb2NhbCB0YSA9IHR5cGUgKGEua2V5KQogIGxvY2FsIHRi
ID0gdHlwZSAoYi5rZXkpCiAgaWYgdGEgfj0gdGIgdGhlbgogICAgcmV0dXJuIHRhIDwgdGIKICBl
bmQKICBpZiB0YSA9PSAnbnVtYmVyJyBvciB0YSA9PSAnc3RyaW5nJyB0aGVuCiAgICByZXR1cm4g
YS5rZXkgPCBiLmtleQogIGVsc2UKICAgIHJldHVybiBzYWZlX3Rvc3RyaW5nIChhLmtleSkgPCBz
YWZlX3Rvc3RyaW5nIChiLmtleSkKICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBzb3J0ICh0LCBm
KQogIC0tIGluc2VydGlvbiBzb3J0CiAgZiA9IGYgb3IgZnVuY3Rpb24gKGEsIGIpIHJldHVybiBh
IDwgYiBlbmQKICBmb3IgaSA9IDEsICN0LTEgZG8KICAgIGxvY2FsIHZhbCA9IHRbaSsxXQogICAg
bG9jYWwgaiA9IGkKICAgIHdoaWxlIGogPj0gMSBhbmQgbm90IGYodFtqXSwgdmFsKSBkbwogICAg
ICB0W2orMV0gPSB0W2pdCiAgICAgIGogPSBqIC0gMQogICAgZW5kCiAgICB0W2orMV0gPSB2YWwK
ICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBhcHByb2FjaCAoZnJvbSwgdG8pCiAgcmV0dXJuIGZy
b20gKyAodG8gLSBmcm9tKSAqIDAuMjUKZW5kCgpsb2NhbCBmdW5jdGlvbiByb3VuZCAodmFsdWUp
CiAgcmV0dXJuIG1hdGguZmxvb3IgKHZhbHVlICsgMC41KQplbmQKCmxvY2FsIGZ1bmN0aW9uIHBh
cnNlX21lc3NhZ2VfZm9yX2xvY2F0aW9uIChtc2cpCiAgbG9jYWwgcGF0aCwgbGluZSwgZXJyID0g
bXNnOm1hdGNoICgnXihbXjpdKyk6KCVkKyk6KC4qKSQnKQogIHJldHVybiBwYXRoLCB0b251bWJl
ciAobGluZSksIGVycgplbmQKCi0tLS0gc3RhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tCgpsb2NhbCBfRyA9IF9HCmxvY2FsIGVycm9yX21lc3NhZ2UKbG9jYWwgZXJy
b3JfdGhyZWFkCmxvY2FsIGVycm9yX3RyYWNlYmFjawpsb2NhbCBpbml0X2RvbmUgPSBmYWxzZQps
b2NhbCB1c2Vfc21hbGxfZm9udCA9IGZhbHNlCmxvY2FsIG1vdXNlX3dhc19jbGlja2VkID0gZmFs
c2UKCi0tIHN0YWNrIHZpZXcKbG9jYWwgc3RhY2tfZnJhbWVzID0ge30KbG9jYWwgY3VycmVudF9z
dGFja19pbmRleCA9IDEKbG9jYWwgaG92ZXJlZF9zdGFja19pbmRleCA9IGZhbHNlCmxvY2FsIG1v
dXNlX292ZXJfc3RhY2sgPSBmYWxzZQpsb2NhbCBzdGFja19tYXhfc2Nyb2xsID0gMApsb2NhbCBz
dGFja19zY3JvbGwgPSAwCmxvY2FsIHN0YWNrX3Njcm9sbF9zbW9vdGggPSAwCgotLSB2YXJpYWJs
ZXMgdmlldwpsb2NhbCB2YXJpYWJsZXMgPSB7fQpsb2NhbCBob3ZlcmVkX3ZhcmlhYmxlID0gZmFs
c2UKbG9jYWwgdmFyaWFibGVzX21heF9zY3JvbGwgPSAwCmxvY2FsIHZhcmlhYmxlc19zY3JvbGwg
PSAwCmxvY2FsIHZhcmlhYmxlc19zY3JvbGxfc21vb3RoID0gMApsb2NhbCBtb3VzZV9vdmVyX3Zh
cmlhYmxlcyA9IGZhbHNlCgotLSBzb3VyY2Ugdmlldwpsb2NhbCBzb3VyY2VfbGluZXMgPSB7fQoK
Ci0tLS0gbWFpbiBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2Nh
bCBXID0gNDgwCmxvY2FsIEggPSAyNzAKCmxvY2FsIGZ1bmN0aW9uIHJlYnVpbGQgKCkKICAtLSBy
ZWJ1aWxkIHN0YWNrIGZyYW1lIGluZm8KICBzdGFja19mcmFtZXMgPSB7fQogIHZhcmlhYmxlcyA9
IHt9CiAgc291cmNlX2xpbmVzID0ge30KICB2YXJpYWJsZXNfc2Nyb2xsID0gMAogIHZhcmlhYmxl
c19zY3JvbGxfc21vb3RoID0gMAoKICBmb3IgaSA9IDAsIDIwIGRvCiAgICBsb2NhbCBpbmZvID0g
ZGVidWcuZ2V0aW5mbyAoZXJyb3JfdGhyZWFkLCBpKQogICAgaWYgbm90IGluZm8gdGhlbgogICAg
ICBicmVhawogICAgZW5kCgogICAgaWYgaW5mby5zaG9ydF9zcmMgdGhlbgogICAgICB0YWJsZS5p
bnNlcnQgKHN0YWNrX2ZyYW1lcywgewogICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWVfb2YgKGlu
Zm8uc2hvcnRfc3JjKSwKICAgICAgICBwYXRoID0gaW5mby5zaG9ydF9zcmMsCiAgICAgICAgbGlu
ZSA9IGluZm8uY3VycmVudGxpbmUsCiAgICAgICAgZGVwdGggPSBpLAogICAgICAgIGZuX25hbWUg
PSAoaW5mby5uYW1lIG9yIChmaWxlbmFtZV9vZiAoaW5mby5zaG9ydF9zcmMpIC4uICc6JyAuLiB0
b3N0cmluZyAoaW5mby5saW5lZGVmaW5lZCkpKSwKICAgICAgICBzb3VyY2UgPSBpbmZvLnNvdXJj
ZSwKICAgICAgfSkKICAgIGVuZAogIGVuZAoKICBsb2NhbCBmcmFtZSA9IHN0YWNrX2ZyYW1lcyBb
Y3VycmVudF9zdGFja19pbmRleF0KCiAgaWYgbm90IGZyYW1lIHRoZW4KICAgIHJldHVybgogIGVu
ZAoKICAtLSByZWJ1aWxkIHZhcmlhYmxlcwogIGRvCiAgICBsb2NhbCBsb2NhbF9pbmRleCA9IDEK
ICAgIHJlcGVhdAogICAgICBsb2NhbCBuYW1lLCB2YWx1ZSA9IGRlYnVnLmdldGxvY2FsIChlcnJv
cl90aHJlYWQsIGZyYW1lLmRlcHRoLCBsb2NhbF9pbmRleCkKICAgICAgaWYgbmFtZSB0aGVuCiAg
ICAgICAgaWYgbmFtZSB_PSAnKHRlbXBvcmFyeSknIHRoZW4KICAgICAgICAgIHRhYmxlLmluc2Vy
dCAodmFyaWFibGVzLCB7CiAgICAgICAgICAgIGtleSA9IG5hbWUsCiAgICAgICAgICAgIHZhbHVl
ID0gdmFsdWUsCiAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgICAgIGxvY2FsX2luZGV4ID0g
bG9jYWxfaW5kZXggKyAxCiAgICAgIGVuZAogICAgdW50aWwgbm90IG5hbWUKCiAgICBsb2NhbCBp
bmZvID0gZGVidWcuZ2V0aW5mbyAoZXJyb3JfdGhyZWFkLCBmcmFtZS5kZXB0aCkKICAgIGlmIGlu
Zm8gYW5kIGluZm8uZnVuYyB0aGVuCiAgICAgIGxvY2FsIHVwdmFsdWVfaW5kZXggPSAxCiAgICAg
IHJlcGVhdAogICAgICAgIGxvY2FsIG5hbWUsIHZhbHVlID0gZGVidWcuZ2V0dXB2YWx1ZSAoaW5m
by5mdW5jLCB1cHZhbHVlX2luZGV4KQogICAgICAgIGlmIG5hbWUgdGhlbgogICAgICAgICAgdGFi
bGUuaW5zZXJ0ICh2YXJpYWJsZXMsIHsKICAgICAgICAgICAga2V5ID0gbmFtZSwKICAgICAgICAg
ICAgdmFsdWUgPSB2YWx1ZSwKICAgICAgICAgIH0pCiAgICAgICAgICB1cHZhbHVlX2luZGV4ID0g
dXB2YWx1ZV9pbmRleCArIDEKICAgICAgICBlbmQKICAgICAgdW50aWwgbm90IG5hbWUKICAgIGVu
ZAogIGVuZAoKICAtLSByZWJ1aWxkIHNvdXJjZSBsaW5lcwogIGxvY2FsIHNvdXJjZSA9IGZyYW1l
LnNvdXJjZQogIGlmIHNvdXJjZSB0aGVuCiAgICBpZiBzdHJpbmcuc3ViIChzb3VyY2UsIDEsIDEp
ID09ICdAJyB0aGVuCiAgICAgIGxvY2FsIGZpbGVuYW1lID0gc3RyaW5nLnN1YiAoc291cmNlLCAy
LCAjc291cmNlKQogICAgICBzb3VyY2UgPSBmZXRjaCAoZmlsZW5hbWUpCiAgICBlbmQKICAgIGlm
IHNvdXJjZSBhbmQgdHlwZSAoc291cmNlKSA9PSAnc3RyaW5nJyB0aGVuCiAgICAgIHNvdXJjZV9s
aW5lcyA9IGdldF9saW5lcyAoc291cmNlKQogICAgZW5kCiAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rp
b24gZXJyb3JfdXBkYXRlICgpCiAgbG9jYWwgbGFzdF9pbmRleCA9IGN1cnJlbnRfc3RhY2tfaW5k
ZXgKICBpZiBidG5wICg1KSBvciBrZXlwICdzcGFjZScgdGhlbgogICAgdXNlX3NtYWxsX2ZvbnQg
PSBub3QgdXNlX3NtYWxsX2ZvbnQKICBlbmQKICBpZiBidG5wICgyKSB0aGVuCiAgICBjdXJyZW50
X3N0YWNrX2luZGV4ID0gbWF0aC5tYXggKDEsIGN1cnJlbnRfc3RhY2tfaW5kZXggLSAxKQogICAg
c3RhY2tfc2Nyb2xsID0gbWF0aC5taW4gKGN1cnJlbnRfc3RhY2tfaW5kZXgtMSwgc3RhY2tfc2Ny
b2xsKQogIGVuZAogIGlmIGJ0bnAgKDMpIHRoZW4KICAgIGN1cnJlbnRfc3RhY2tfaW5kZXggPSBt
YXRoLm1pbiAoI3N0YWNrX2ZyYW1lcywgY3VycmVudF9zdGFja19pbmRleCArIDEpCiAgICBzdGFj
a19zY3JvbGwgPSBtYXRoLm1heCAoKGN1cnJlbnRfc3RhY2tfaW5kZXgpIC0gKCNzdGFja19mcmFt
ZXMgLSBzdGFja19tYXhfc2Nyb2xsKSwgc3RhY2tfc2Nyb2xsKQogIGVuZAoKICBsb2NhbCBfLCBf
LCBjbGljaywgXywgd2hlZWwgPSBtb3VzZSAoKQogIGlmIG1vdXNlX292ZXJfc3RhY2sgdGhlbgog
ICAgc3RhY2tfc2Nyb2xsID0gbWF0aC5tYXggKDAsIG1hdGgubWluIChzdGFja19zY3JvbGwgLSB3
aGVlbCAqIDIsIHN0YWNrX21heF9zY3JvbGwpKQogIGVuZAogIHN0YWNrX3Njcm9sbF9zbW9vdGgg
PSBhcHByb2FjaCAoc3RhY2tfc2Nyb2xsX3Ntb290aCwgc3RhY2tfc2Nyb2xsKQogIGlmIG1vdXNl
X292ZXJfdmFyaWFibGVzIHRoZW4KICAgIHZhcmlhYmxlc19zY3JvbGwgPSBtYXRoLm1heCAoMCwg
bWF0aC5taW4gKHZhcmlhYmxlc19zY3JvbGwgLSB3aGVlbCAqIDIsIHZhcmlhYmxlc19tYXhfc2Ny
b2xsKSkKICBlbmQKICB2YXJpYWJsZXNfc2Nyb2xsX3Ntb290aCA9IGFwcHJvYWNoICh2YXJpYWJs
ZXNfc2Nyb2xsX3Ntb290aCwgdmFyaWFibGVzX3Njcm9sbCkKCiAgY2xpY2sgPSBjbGljayB_PSAw
CiAgaWYgY2xpY2sgYW5kIG5vdCBtb3VzZV93YXNfY2xpY2tlZCB0aGVuCiAgICBpZiBob3ZlcmVk
X3N0YWNrX2luZGV4IHRoZW4KICAgICAgY3VycmVudF9zdGFja19pbmRleCA9IGhvdmVyZWRfc3Rh
Y2tfaW5kZXgKICAgIGVuZAogICAgaWYgaG92ZXJlZF92YXJpYWJsZSBhbmQgdHlwZSAoaG92ZXJl
ZF92YXJpYWJsZS52YWx1ZSkgPT0gJ3RhYmxlJyB0aGVuCiAgICAgIGlmIGhvdmVyZWRfdmFyaWFi
bGUuY29udGVudHMgdGhlbgogICAgICAgIGhvdmVyZWRfdmFyaWFibGUuY29udGVudHMgPSBuaWwK
ICAgICAgZWxzZQogICAgICAgIGxvY2FsIGNvbnRlbnRzID0ge30KICAgICAgICBob3ZlcmVkX3Zh
cmlhYmxlLmNvbnRlbnRzID0gY29udGVudHMKICAgICAgICBmb3Igayx2IGluIHBhaXJzIChob3Zl
cmVkX3ZhcmlhYmxlLnZhbHVlKSBkbwogICAgICAgICAgdGFibGUuaW5zZXJ0IChjb250ZW50cywg
ewogICAgICAgICAgICBrZXkgPSBrLAogICAgICAgICAgICB2YWx1ZSA9IHYsCiAgICAgICAgICB9
KQogICAgICAgIGVuZAogICAgICAgIHNvcnQgKGNvbnRlbnRzLCBjb21wYXJlX2tleXMpCiAgICAg
IGVuZAogICAgZW5kCiAgZW5kCiAgbW91c2Vfd2FzX2NsaWNrZWQgPSBjbGljawoKICBpZiBjdXJy
ZW50X3N0YWNrX2luZGV4IH49IGxhc3RfaW5kZXggdGhlbgogICAgcmVidWlsZCgpCiAgZW5kCmVu
ZAoKbG9jYWwgZnVuY3Rpb24gZXJyb3JfZHJhdyAoKQogIGxvY2FsIHByZWZpeCA9IHVzZV9zbWFs
bF9mb250IGFuZCAnXDAxNCcgb3IgJycKICBsb2NhbCBmb250X2hlaWdodCA9ICh1c2Vfc21hbGxf
Zm9udCBhbmQgNiBvciAxMSkKICBsb2NhbCBteCwgbXkgPSBtb3VzZSgpCiAgbG9jYWwgb3Zlcl9z
ZWN0aW9uID0gZmFsc2UKICBsb2NhbCB4MCwgeTAsIHgsIHkKCiAgbG9jYWwgZnVuY3Rpb24gZ29f
dG8gKG5ld194LCBuZXdfeSkKICAgIHgwLCB5MCA9IG5ld194LCBuZXdfeQogICAgeCwgeSA9IHgw
LCB5MAogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiBzZWN0aW9uIChzeCwgc3ksIHN3LCBzaCkKICAg
IG92ZXJfc2VjdGlvbiA9CiAgICAgIG14ID49IHN4IGFuZCBteCA8IHN4ICsgc3cgYW5kCiAgICAg
IG15ID49IHN5IGFuZCBteSA8IHN5ICsgc2gKICAgIGNsaXAgKHN4LCBzeSwgc3csIHNoKQogICAg
Z29fdG8oc3grMiwgc3krMikKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gcHJpbnRfaG9yaXpvbnRh
bCAodGV4dCwgY29sb3IpCiAgICBsb2NhbCBuZXdfeCwgX25ld195ID0gcHJpbnQgKHByZWZpeCAu
LiB0ZXh0LCB4LCB5LCBjb2xvcikKICAgIHggPSBuZXdfeAogIGVuZAoKICBsb2NhbCBmdW5jdGlv
biBwcmludF9saW5lICh0ZXh0LCBjb2xvcikKICAgIGxvY2FsIF9uZXdfeCwgbmV3X3kgPSBwcmlu
dCAocHJlZml4IC4uIHRleHQsIHgsIHksIGNvbG9yKQogICAgeCA9IHgwCiAgICB5ID0gbmV3X3kK
ICBlbmQKCiAgLS0gZHJhdyBzZXR1cAogIGNscyAoMCkKICAtLSBsaWdodGVyIGRhcmsgZ3JheSBm
b3IgcmVhZGFiaWxpdHkKICBwYWwgKDUsIDB4ZmY3MDcwNzAsIDIpCiAgY29sb3IgKDUpCgogIC0t
IGVycm9yIG1lc3NhZ2UKICBzZWN0aW9uICgwLCAwLCBXLCBILzIpCiAgbW91c2Vfb3Zlcl9zdGFj
ayA9IG92ZXJfc2VjdGlvbgoKICBsb2NhbCBsb2NfcGF0aCwgbG9jX2xpbmUsIGVyciA9IHBhcnNl
X21lc3NhZ2VfZm9yX2xvY2F0aW9uIChlcnJvcl9tZXNzYWdlKQogIGlmIGxvY19wYXRoIHRoZW4K
ICAgIHByaW50X2xpbmUgKCdlcnJvciBhdCAnIC4uIGxvY19wYXRoIC4uICc6JyAuLiBsb2NfbGlu
ZSAuLiAnOicsIDYpCiAgICBwcmludF9saW5lICgnICAnIC4uIGVyciwgOCkKICBlbHNlCiAgICBw
cmludF9saW5lICgnZXJyb3I6JywgNikKICAgIHByaW50X2xpbmUgKCcgICcgLi4gZXJyb3JfbWVz
c2FnZSwgOCkKICBlbmQKCiAgLS0gc3RhY2sgZnJhbWVzCiAgcHJpbnRfbGluZSAoJ3N0YWNrOics
IDYpCiAgc2VjdGlvbiAoMCwgeSwgVywgSC8yLXkpCiAgbG9jYWwgc3RhY2tfdG9wX3kgPSB5CiAg
eSA9IHkgLSByb3VuZCAoc3RhY2tfc2Nyb2xsX3Ntb290aCAqIGZvbnRfaGVpZ2h0KQogIGxvY2Fs
IGxhc3RfaG92ZXJlZF9zdGFja19pbmRleCA9IGhvdmVyZWRfc3RhY2tfaW5kZXgKICBob3ZlcmVk
X3N0YWNrX2luZGV4ID0gZmFsc2UKICBmb3IgaSwgZnJhbWUgaW4gaXBhaXJzIChzdGFja19mcmFt
ZXMpIGRvCiAgICBjb2xvciAobGFzdF9ob3ZlcmVkX3N0YWNrX2luZGV4ID09IGkgYW5kIDcgb3IK
ICAgICAgICAgICBjdXJyZW50X3N0YWNrX2luZGV4ID09IGkgYW5kIDYgb3IgNSkKCiAgIGxvY2Fs
IHlfYmVmb3JlID0geQogICAgcHJpbnRfbGluZSAoc3RyaW5nLmZvcm1hdCAoJyAgJXM6JWQgaW4g
ZnVuY3Rpb24gJXMnLAogICAgICBmcmFtZS5maWxlbmFtZSwgZnJhbWUubGluZSwgZnJhbWUuZm5f
bmFtZSApKQogICAgaWYgb3Zlcl9zZWN0aW9uIHRoZW4KICAgICAgaWYgbXkgPj0geV9iZWZvcmUg
YW5kIG15IDwgeSB0aGVuCiAgICAgICAgaG92ZXJlZF9zdGFja19pbmRleCA9IGkKICAgICAgZW5k
CiAgICBlbmQKICBlbmQKICBzdGFja19tYXhfc2Nyb2xsID0gI3N0YWNrX2ZyYW1lcyAtIChILzIg
LSBzdGFja190b3BfeSkgLyBmb250X2hlaWdodAoKICBsb2NhbCBmcmFtZSA9IHN0YWNrX2ZyYW1l
cyBbY3VycmVudF9zdGFja19pbmRleF0KICBpZiBub3QgZnJhbWUgdGhlbgogICAgcmV0dXJuCiAg
ZW5kCgogIC0tIHZhcmlhYmxlcwogIHNlY3Rpb24gKDAsIEgvMiwgVy8yLCBILzIpCiAgbW91c2Vf
b3Zlcl92YXJpYWJsZXMgPSBvdmVyX3NlY3Rpb24KICBwcmludF9saW5lICgndmFyaWFibGVzOics
IDYpCiAgc2VjdGlvbiAoMCwgeSwgVy8yLCBILXkpCiAgbG9jYWwgdmFyaWFibGVzX3RvcF95ID0g
eQogIHkgPSB5IC0gcm91bmQgKHZhcmlhYmxlc19zY3JvbGxfc21vb3RoICogZm9udF9oZWlnaHQp
CiAgbG9jYWwgbGFzdF9ob3ZlcmVkX3ZhcmlhYmxlID0gaG92ZXJlZF92YXJpYWJsZQogIGhvdmVy
ZWRfdmFyaWFibGUgPSBmYWxzZQogIGxvY2FsIHZhcmlhYmxlX2NvdW50ID0gMAogIGxvY2FsIGZ1
bmN0aW9uIGRyYXdfdmFyaWFibGUgKHZhcmlhYmxlLCBpbmRlbnQpCiAgICB2YXJpYWJsZV9jb3Vu
dCA9IHZhcmlhYmxlX2NvdW50ICsgMQogICAgbG9jYWwgaG92ZXJlZCA9IHZhcmlhYmxlID09IGxh
c3RfaG92ZXJlZF92YXJpYWJsZQogICAgbG9jYWwgeV9iZWZvcmUgPSB5CiAgICBwcmludF9ob3Jp
em9udGFsIChpbmRlbnQgLi4gdmFyaWFibGUua2V5LCBob3ZlcmVkIGFuZCA3IG9yIDYpCiAgICBw
cmludF9ob3Jpem9udGFsICgnOiAnLCB2YXJpYWJsZSA9PSBsYXN0X2hvdmVyZWRfdmFyaWFibGUg
YW5kIDcgb3IgNSkKICAgIHByaW50X2xpbmUgKHNhZmVfdG9zdHJpbmcodmFyaWFibGUudmFsdWUp
KQoKICAgIGlmIG92ZXJfc2VjdGlvbiBhbmQgdHlwZSAodmFyaWFibGUudmFsdWUpID09ICd0YWJs
ZScgdGhlbgogICAgICBpZiBteCA_PSAwIGFuZCBteCA8IFcvMiBhbmQgbXkgPj0geV9iZWZvcmUg
YW5kIG15IDwgeSB0aGVuCiAgICAgICAgaG92ZXJlZF92YXJpYWJsZSA9IHZhcmlhYmxlCiAgICAg
IGVuZAogICAgZW5kCgogICAgaWYgdmFyaWFibGUuY29udGVudHMgdGhlbgogICAgICBmb3IgXywg
diBpbiBpcGFpcnMgKHZhcmlhYmxlLmNvbnRlbnRzKSBkbwogICAgICAgIGRyYXdfdmFyaWFibGUg
KHYsIGluZGVudCAuLiAnICAnKQogICAgICBlbmQKICAgIGVuZAogIGVuZAogIGZvciBfLCB2YXJp
YWJsZSBpbiBpcGFpcnMgKHZhcmlhYmxlcykgZG8KICAgIGRyYXdfdmFyaWFibGUgKHZhcmlhYmxl
LCAnICAnKQogIGVuZAogIHZhcmlhYmxlc19tYXhfc2Nyb2xsID0gdmFyaWFibGVfY291bnQgLSAo
SCAtIHZhcmlhYmxlc190b3BfeSkgLyBmb250X2hlaWdodAoKICAtLSBzb3VyY2UKICBzZWN0aW9u
IChXLzIsIEgvMiwgVy8yLCBILzIpCiAgcHJpbnRfbGluZSAoJ3NvdXJjZSBvZiAnIC4uIGZyYW1l
LnBhdGggLi4gJzonLCA2KQogIGxvY2FsIGNvbnRleHQgPSB1c2Vfc21hbGxfZm9udCBhbmQgMTAg
b3IgNQogIGxvY2FsIGlfbWluID0gbWF0aC5tYXggKDEsIGZyYW1lLmxpbmUgLSBjb250ZXh0KQog
IGxvY2FsIGlfbWF4ID0gbWF0aC5taW4gKCNzb3VyY2VfbGluZXMsIGZyYW1lLmxpbmUgKyBjb250
ZXh0KQogIGZvciBpID0gaV9taW4sIGlfbWF4IGRvCiAgICBjb2xvciAoaSA9PSBmcmFtZS5saW5l
IGFuZCA2IG9yIDUpCiAgICBwcmludF9ob3Jpem9udGFsIChzdHJpbmcuZm9ybWF0ICgnJTRkICcs
IGkpKQogICAgcHJpbnRfbGluZSAoc291cmNlX2xpbmVzIFtpXSkKICBlbmQKCiAgY2xpcCAoKQpl
bmQKCi0tLS0gdGFraW5nIG92ZXIgZHVyaW5nIGVycm9ycyAtLS0tLS0tLS0tLS0tLS0tLS0tCgps
b2NhbCBmdW5jdGlvbiByZXNldCAoKQogIC0tIGJhc2VkIG9uIHJlc2V0KCkgZnJvbSAvc3lzdGVt
L2xpYi9oZWFkLmx1YQogIC0tIHNlZSB0aGF0IGZuIGZvciBpbmZvCiAgbm90ZSAoKQogIC0tIHBp
Y290cm9uIHNlZ2ZhdWx0cyBpZiB3ZSBjYWxsIGNsaXAoKSBkdXJpbmcgaW5pdAogIGlmIGluaXRf
ZG9uZSB0aGVuCiAgICBjbGlwICgpCiAgZW5kCiAgY2FtZXJhICgpCiAgcGFsICgpCiAgcGFsdCAo
KQogIG1lbXNldCAoMHg1NTFmLCAwLCA5KQogIHBva2UgKDB4NTUwOCwgMHgzZikKICBwb2tlICgw
eDU1MDksIDB4M2YpCiAgcG9rZSAoMHg1NTBhLCAweDNmKQogIHBva2UgKDB4NTUwYiwgMHgwMCkK
ICBjb2xvciAoNikKICBmaWxscCAoKQogIHBva2UgKDB4NWY1NiwgMHg0MCkKICBwb2tlICgweDVm
NTcsIDB4NTYpCiAgcG9rZSAoMHg0MDAwLCBnZXQgKGZldGNoIi9zeXN0ZW0vZm9udHMvbGlsLmZv
bnQiKSkKICBwb2tlICgweDU2MDAsIGdldCAoZmV0Y2giL3N5c3RlbS9mb250cy9wOC5mb250Iikp
CiAgcG9rZSAoMHg1NjA2LCBwZWVrICgweDU2MDApICogNCkKICBwb2tlICgweDU2MDUsIDB4MikK
ICBwb2tlICgweDVmMjgsIDY0KQogIHBva2UgKDB4NWYyOSwgNjQpCmVuZAoKbG9jYWwgZnVuY3Rp
b24gb25fZXJyb3IgKHRocmVhZCwgbWVzc2FnZSkKICAtLSBkbyB0aGlzIGZpcnN0IGluIGNhc2Ug
d2UgaGl0IGFub3RoZXIgZXJyb3IKICBlcnJvcl90cmFjZWJhY2sgPSBkZWJ1Zy50cmFjZWJhY2sg
KHRocmVhZCwgbWVzc2FnZSkKICBwcmludGggKGVycm9yX3RyYWNlYmFjaykKCiAgZXJyb3JfdGhy
ZWFkID0gdGhyZWFkCiAgZXJyb3JfbWVzc2FnZSA9IHRvc3RyaW5nIChtZXNzYWdlKQogIHJlc2V0
ICgpCiAgcmVidWlsZCAoKQogIC0tIGp1bXAgdG8gdGhlIHByb3BlciBzdGFjayBmcmFtZSBpZiB3
ZSBjYW4KICBsb2NhbCBsb2NfcGF0aCwgbG9jX2xpbmUgPSBwYXJzZV9tZXNzYWdlX2Zvcl9sb2Nh
dGlvbiAoZXJyb3JfbWVzc2FnZSkKICBmb3IgaSwgZnJhbWUgaW4gaXBhaXJzIChzdGFja19mcmFt
ZXMpIGRvCiAgICBpZiBmcmFtZS5wYXRoID09IGxvY19wYXRoIGFuZCBmcmFtZS5saW5lID09IGxv
Y19saW5lIHRoZW4KICAgICAgY3VycmVudF9zdGFja19pbmRleCA9IGkKICAgICAgcmVidWlsZCAo
KQogICAgICBicmVhawogICAgZW5kCiAgZW5kCmVuZAoKLS0tLSBpbnN0YWxsIG1haW4gZXZlbnRz
IHRoYXQgY2F0Y2ggZXJyb3JzIC0tLS0tLS0KCmxvY2FsIHVzZXJfaW5pdCA9IHJhd2dldCAoX0cs
ICdfaW5pdCcpCmxvY2FsIHVzZXJfdXBkYXRlID0gcmF3Z2V0IChfRywgJ191cGRhdGUnKQpsb2Nh
bCB1c2VyX2RyYXcgPSByYXdnZXQgKF9HLCAnX2RyYXcnKQoKYXNzZXJ0ICh1c2VyX2RyYXcgYW5k
IHVzZXJfdXBkYXRlLAogICdwbGVhc2UgaW5jbHVkZSBpbnN0YWxsX2Vycm9yX2hhbmRsZXIgYWZ0
ZXIgZGVmaW5pbmcgYm90aCBfdXBkYXRlIGFuZCBfZHJhdycpCgpsb2NhbCBmdW5jdGlvbiBjYWxs
X2Vycm9yX2V2ZW50IChmbiwgLi4uKQogIC0tIGlmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gb3VyIHVw
ZGF0ZSBvciBkcmF3LCB0aHJvdyB0aGUKICAtLSBvcmlnaW5hbCBlcnJvciBhcyB3ZWxsIGFzIHRo
ZSBuZXcgZXJyb3IKICBsb2NhbCBzdWNjZXNzLCBlcnIgPSBwY2FsbCAoZm4sIC4uLikKICBpZiBu
b3Qgc3VjY2VzcyB0aGVuCiAgICBlcnJvciAoZXJyb3JfdHJhY2ViYWNrIC4uICdcblxuZXJyb3Ig
ZHVyaW5nIGVycm9yIGhhbmRsaW5nOiAnIC4uIHRvc3RyaW5nIChlcnIpKQogIGVuZAplbmQKCmxv
Y2FsIGZ1bmN0aW9uIGNhbGxfcHJvdGVjdGVkIChmbikKICAtLSBuZWVkIHRvIHVzZSBjb3Jlc3Vt
ZSBldGMuIGFuZCBub3QgY29yb3V0aW5lLnJlc3VtZSBldGMuCiAgLS0gZm9yIHBpY290cm9uIGNv
bXBhdGliaWxpdHkKICBsb2NhbCB0aHJlYWQgPSBjb2NyZWF0ZSAoZm4pCiAgbG9jYWwgc3VjY2Vz
cywgbWVzc2FnZSA9IGNvcmVzdW1lKHRocmVhZCkKICBpZiBjb3N0YXR1cyAodGhyZWFkKSB_PSAn
ZGVhZCcgdGhlbgogICAgY2FsbF9lcnJvcl9ldmVudCAob25fZXJyb3IsIHRocmVhZCwgJ3NldHVw
X2Vycm9yX2Rpc3BsYXkubHVhOiBfdXBkYXRlIGFuZCBfZHJhdyBzaG91bGRuXCd0IHlpZWxkJykK
ICBlbmQKICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChvbl9lcnJv
ciwgdGhyZWFkLCBtZXNzYWdlKQogIGVuZAplbmQKCmlmIHVzZXJfaW5pdCB0aGVuCiAgZnVuY3Rp
b24gX2luaXQgKCkKICAgIGNhbGxfcHJvdGVjdGVkICh1c2VyX2luaXQpCiAgICBpbml0X2RvbmUg
PSB0cnVlCiAgZW5kCmVsc2UKICBpbml0X2RvbmUgPSB0cnVlCmVuZAoKZnVuY3Rpb24gX3VwZGF0
ZSAoKQogIGlmIGVycm9yX3RocmVhZCB0aGVuCiAgICBjYWxsX2Vycm9yX2V2ZW50IChlcnJvcl91
cGRhdGUpCiAgZWxzZQogICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfdXBkYXRlKQogIGVuZAplbmQK
CmZ1bmN0aW9uIF9kcmF3ICgpCiAgaWYgZXJyb3JfdGhyZWFkIHRoZW4KICAgIGNhbGxfZXJyb3Jf
ZXZlbnQgKGVycm9yX2RyYXcpCiAgZWxzZQogICAgY2FsbF9wcm90ZWN0ZWQgKHVzZXJfZHJhdykK
ICBlbmQKZW5k
:: includes/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTI3IDEyOjQwOjIwIixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyJdXQ==
:: map/
:: map/blueprints/
:: map/blueprints/mega.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTI5IDE0OjU5OjI0Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249NjAyXV1sejQA5AAAAM8DAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDEwAwAvIjABACYTZAQADygAGS9kMAEAIx9kBAAAGzAMAAwBAAgcAC5kMAEACBwAL2Qw
AQAPDCgADAwADAQADwEAI-EIIiksaGlkZGVuPWZhbHNlLHBhbl94PTAIANJ5PTAsdGlsZV9oPTE2
CgAQdwoAj3pvb209MX0s5wEKL2MwBAAXCAEADxQAIQgIAC9jMAEADx9jBAAIFzAMAAQEAAgBAAgU
AAgIAAgMAAQIAAQMAB8wFAAYH2MEAAwIAQAfYwQAFg-nASRQbT0xfX0=
:: map/blueprints/test2.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTI3IDE0OjUwOjM2Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249OTc3XV1sejQApQAAAMoBAAD-D3t7Ym1wPXVzZXJkYXRh
KCJpMTYiLDYsNiwiMDAwMQQACAwBAAsYACpkMBgABRAADxgAFA4EAPEHIiksaGlkZGVuPXRydWUs
cGFuX3g9MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCPem9vbT0xfSzkAAgvYzAEAAcMAQAMGAAXYwgA
BAQACAEAF2MEAAgBAB9jBAAGBuQAT2ZhbHPlABZQbT0xfX0=
:: map/blueprints/test3.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTI5IDE0OjMxOjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249NjM4XV1sejQAuQAAAI0CAAD-DXt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDEwLDYsIjABABovZDAcABMXZAgABAQADwEADRdkBAAMAQAbZAwAL2QwAQAl8QgiKSxo
aWRkZW49ZmFsc2UscGFuX3g9MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCPem9vbT0xfSxGAQkvYzAE
ABsPAQAFG2MEABcwDAAqYzABAA8UAAkmYzABABdjBAAEAQAMEAAIFAAPBAAPD0YBJFBtPTF9fQ==
:: map/blueprints/test.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIyIDE0OjA5OjI0Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249MTMyOV1dbHo0ANMAAAB1AgAA8Bd7e3Bhbl95PTAsbmFt
ZT0ic3ByaXRlcyIsaGlkZGVuPWZhbHNlLCQA-xF4PTAsYm1wPXVzZXJkYXRhKCJpMTYiLDksNiwi
MDAwMQQAEyJkMAQADwEAAgckAAwBAB9kJAAkL2QwAQAEHzEEABHCIiksdGlsZV9oPTE2CgAQdwoA
i3pvb209MX0sPAFFbWFzazkBP3RydTgBES9jMAQAHB8xBAAAFzAEABsxBAAXMAgAFzAQAAgEABcw
CAAIBAAfMQQAAB8wBAARDzgBB1BtPTF9fQ==
:: map/blueprints/tutorial.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAyLTA0IDEyOjQ5OjI0Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249MTRdXWx6NACAAAAAmwEAAP8Me3tibXA9dXNlcmRhdGEo
ImkxNiIsNiw1LCIwAQBk8QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9MAgA0nk9MCx0aWxlX2g9MTYK
ABB3CgCPem9vbT0xfSzNAAgvYzAEAAcqZDABAAQYAAQBAAQgAA8wAA0OBAAPzQAkUG09MX19
:: map/blueprints/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTExLTIyIDE0OjA5OjA5Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyJdXQ==
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNC0x
MS0yOSAxNDozMDo0NCIscmV2aXNpb249MzE1MV1dbHo0AIYAAABaAQAA8xN7e2JtcD11c2VyZGF0
YSgiaTE2Iiw4LDgsIjAwYzAwMGMxCAAIBAAIFAAPIAAJHzEEABAOKAAOPAAPBAApHzAEAAQfMQQA
DfEKIiksaGlkZGVuPWZhbHNlLHBhbl94PS0yMAoA8gB5PS0xNSx0aWxlX2g9MTYKABB3CgCAem9v
bT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIsc3RvcmVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Il1d
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxva3BhbF92ZXJzaW9uPSIwLjAuNCIsbG9ja2VkPXtbMF09ZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGJsYWNrZXN0X2NvbG9yPTAsbW9kaWZpZWQ9
IjIwMjUtMDItMDQgMTI6NTM6MDciLGJnX2NvbG9yPTAsY3JlYXRlZD0iMjAyNC0wNC0yNyAwOToz
MToyOSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LHJldmlzaW9u
PTIzMTksdGVzdF9jdWJlX2NvbG9ycz17WzBdPXsxNSwzMSw0fSx7MzEsNCwyMH0sezQsMjAsMjF9
LHsxMCw5LDI1fSx7OSwyNSwyNH0sezgsMjQsMn0sezI2LDExLDI3fSx7MTEsMjcsM30sezI3LDMs
MTl9LHsyOCwxNywxOX0sezI4LDEyLDE2fSx7MTIsMTYsMX0sezYsMjksMTN9LHsyOSwxMywxOH0s
ezEzLDE4LDF9LHs3LDIzLDE0fSx7MjMsMTQsMTN9LHsxNCwzMCwxOH0sezcsNiwyMn0sezYsMjIs
NX0sezIyLDUsMjF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9fSx3aGl0ZXN0X2NvbG9yPTddXWx6
NADvAQAAFQIAAPYFdXNlcmRhdGEoImkzMiIsNjQsIjABAPAaZDIwMzAwMGEzMjhiMzAwMTM5ZDA4
MDBhZTZjMzcwMDQxNWQ2NjAwZDcCADEwMGYBAIAwMGUwM2MyOBAAQGJiMzEIACBlNzAAwDU4ZDMz
MjAwNWJhOCgAUTcxYTZhIADwBTgyY2UwMGY1Yjc4NDAwMDI0YWNheQDAOThhYzAwNjI2NGRjkQDw
ATYwNGIwMDgyM2MzZDAwMzQCAPAIMDBjNTk3ODIwMGZlYzllZDAwY2YzYzdYADA2OGZ4APAFOGNk
NjEyMDAyMGI1NjIwMDk4ZGOAAPALOWJhMGVmMDBjYzY5ZTQwMGRhNjU1ZTAwYTgCAEAwMDdiAgBA
MDAxNQIAYDAwYmRmZpgAYDI1ZTJjZJAAEDXnAFAwMDA0ZQYAQDE3MjggAUAzNzZkOQHANmFiNDE3
MDBiZWVikADwBWVlZmZhOTAwYjZjMTIxMDA5Mzk3IABAY2M4ZmAAUGFkNGUxYAAwMzE3sADwAjVj
M2MwZDAwZTJkN2I1MDA0JgCRNzAwZTE4Mjg5WAGgOWM1MDA4NzE2NIgBUDU5Y2ZjMAAgYzngAGBh
Njc1ZmWIACAzMbgAwDVhMTk5MTAwMjExNmcBYDNkMzRhNWgBETgwAIAwMDE3N2QiKQ==
:: pal/amiga-pixels-64.pal
b64$LS1bW3BvZCxva3BhbF92ZXJzaW9uPSIwLjAuNCIsY3JlYXRlZD0iMjAyNC0wNC0yNyAwODo1
OTozNiIsbW9kaWZpZWQ9IjIwMjQtMDUtMDQgMTU6MTU6MjMiLGhpZGRlbl90b2dnbGVzPXtbMF09
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGJsYWNrZXN0X2NvbG9yPTAsbG9ja2VkPXtbMF09ZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGJnX2NvbG9yPTAsaGlkZGVu
PXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LHJldmlzaW9u
PTQ4LHRlc3RfY3ViZV9jb2xvcnM9e1swXT17MSwxLDF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9
LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX0s
ezEsMSwxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfSx7
MSwxLDF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX0sezEsMSwxfX0sd2hpdGVzdF9j
b2xvcj03XV1sejQAAwIAABUCAADwQHVzZXJkYXRhKCJpMzIiLDY0LCIwMDExMTAxMjAwM2IyNDRm
MDA4YTM5NWEwMDM1NzEyZDAwYmU2OTJmMDA1YjU2NWUwMGU2ZTJlNjAwZmQCAPAgMDBmMzUwMzkw
MGZlYTI2YjAwZjllZDI4MDA3Y2FkMTUwMDU1YTVmNjAwNWE1MjcwAEEyYzZmKACQY2E1NDAwMzQ2
NwDgMDUxYTVhNTAwNjYzZjiQAPBeMjY2NjYwMDc3NDExZDAwMzMyZjRjMDA2YTk4OGEwMGZjYjll
YTAwYWEzMTIzMDBiZjk4MWEwMGIwZjc5MzAwNTdiNTQ5MDBhY2YyZmUwMDkzODZjNzAwZDc1ZDky
MDA4YzhhNGIwMDFmMWUxZnAAQDMwMzOAACA2MXgAUDk4OTQ5yADwBGQxYzE0MDA0NjI1MTAwMDc4
NWUIAPANNDczNjA5MDAyYjNlMDcwMDRjNmIwZDAwZGNmNFAAQGU3ZTVAAGE1NzU1MmVgABAxoADw
HTI4MzMxZTAwNDU1YTM0MDA3MDkzNTUwMGQxZWJhYzAwY2FlZGU1MDA0MTVlGABgMjUzNjMxqAAw
NDIx0ADANGYyZjIwMDFjM2IzwABAZTNiOEAAMGNlMegAUDdjODNmsABQYzUwYWKgADAyZTeQAEBi
ZTRmMAHwADU2NmNkMDA1NzIwMzMiKQ==
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTI3IDA3OjI4OjMyIixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyJdXQ==
:: scripts/
:: scripts/component_library.lua
--[[pod_format="raw",created="2024-05-12 08:42:14",modified="2024-05-12 09:25:33",revision=63]]
component_types = {
	{
		type = 1,
		name = "Basic",
		info = "A regular tile.\nA very long \ninformation thing.",
		width = 1,
		height = 1,
		sprite = 8,
		rotations = 0,
		max_rot = 1,
		price = 1,
		collider = { { 1 }
		},
		draw = function(self)
			spr(self.sprite + self.rotations, self.x, self.y)
		end
	},
	{
		type = 2,
		name = "Two-by-one",
		info = "Little pill shape",
		width = 2,
		height = 1,
		sprite = 9,
		rotations = 0,
		max_rot = 2,
		price = 4,
		collider = {
			{ 2, 2 }
		},
		draw = function(self)
			spr(self.sprite + self.rotations, self.x, self.y)
		end
	},
	{
		type = 3,
		name = "L-shape",
		info = "Good for corners!",
		width = 2,
		height = 2,
		sprite = 16,
		rotations = 0,
		max_rot = 4,
		price = 2,
		collider = {
			{ 1, 1 },
			{ 1, 0 }
		},
			draw = function(self)
			spr(self.sprite + self.rotations, self.x, self.y)
		end
	},
	{
		type = 4,
		name = "Long Pill",
		info = "A very long one.",
		width = 4,
		height = 1,
		sprite = 24,
		rotations = 0,
		max_rot = 2,
		price = 10,
		collider = {
			{ 1, 1, 1, 1 }
		},
		draw = function(self)
			spr(self.sprite + self.rotations, self.x, self.y)
		end
	},
	{
		type = 5,
		name = "Box",
		info = "A big box.",
		width = 2,
		height = 2,
		sprite = 32,
		rotations = 0,
		max_rot = 80,
		price = 3,
		collider = {
			{ 1, 1 },
			{ 1, 1 }
		},
		draw = function(self)
			spr(self.sprite + self.rotations, self.x, self.y)
		end
	}
}
:: scripts/generic_draw.lua
--[[pod_format="raw",created="2024-05-12 09:25:31",modified="2024-05-12 09:25:53",revision=1]]
function drawDebug()
	local color = 8
	if can_place then color = 7 end
	local cpu = "CPU:" .. flr(stat(1) * 100)
	print(cpu, 480 - 8 * #cpu, 32, stat(1) + 6)
	print(tooltip, 480 - 8, 40, 30)
	--print(#placed_components,4,12,11)
	--[[
	for y = 1,#held_component.collider do
		for x = 1,#held_component.collider[y] do
			print(held_component.collider[y][x],30+x*12,30+y*12,7)
		end
	end
	]]
	--print("last delete: " .. debug_delete,4,32,57)
end

function drawCheckerBoard(offset_x, offset_y, grid_w, grid_h, clr, bg_clr)
	--checkerboard
	rectfill(offset_x, offset_y, offset_x + (grid_w * grid_size) - 1, offset_y + (grid_h * grid_size) - 1, bg_clr)
	for x = 0, grid_w - 1 do
		for y = 0, grid_h - 1 do
			if x % 2 == 0 and y % 2 == 0 or x % 2 ~= 0 and y % 2 ~= 0 then
				rectfill(offset_x + x * grid_size,
					offset_y + y * grid_size,
					offset_x + (x * grid_size) + grid_size - 1,
					offset_y + (y * grid_size) + grid_size - 1,
					clr
				)
			end
		end
	end
end

function drawWindowMetal(x, y, width, height)
	palt(0, false)
	palt(15, true)
	rectfill(x, y + 8, x + width - 1, y + height - 8, 0)
	--the sprite numbers
	local windowsprites = {
		88, 89, 90,
		96, 97, 98
	}
	rect(x, y + 7, x + width - 1, y + height - 8, 5)
	spr(windowsprites[1], x, y)
	sspr(windowsprites[2], 0, 0, 8, 8, x + 8, y, width - 16, 8)
	spr(windowsprites[3], x + width - 8, y)

	spr(windowsprites[4], x, y + height - 8)
	sspr(windowsprites[5], 0, 0, 8, 8, x + 8, y + height - 8, width - 16, 8)
	spr(windowsprites[6], x + width - 8, y + height - 8)
	palt(0, true)
end

function drawWindowMarble(x, y, width, height)
	rectfill(x, y, x + width - 1, y + height - 1, 33)
	--the sprite numbers
	local windowsprites = {
		105, 106,
		113, 114
	}
	--rect(x,y+7,x+width-1,y+height-8,5)
	sspr(windowsprites[1], 4, 0, 4, 8, x + 8, y, width - 16, 8)
	sspr(windowsprites[1], 0, 4, 8, 4, x, y + 8, 8, height - 8)
	sspr(windowsprites[2], 0, 4, 8, 4, x + width - 8, y + 8, 8, height - 8)
	sspr(windowsprites[3], 4, 0, 4, 8, x + 8, y + height - 8, width - 16, 8)

	spr(windowsprites[1], x, y)
	spr(windowsprites[2], x + width - 8, y)

	spr(windowsprites[3], x, y + height - 8)

	spr(windowsprites[4], x + width - 8, y + height - 8)
end

function drawComponentInBox(i, x, y, w)
	local h = component_types[i].height * grid_size
	local infostring = placed_component_amount[i] .. " x " .. "$" .. component_types[i].price
	drawCheckerBoard(x + 7, y, component_types[i].width, component_types[i].height, 38, 39)
	spr(component_types[i].sprite, x + 7, y)

	spr(111, x - 1, y)
	pal(11, 39)
	spr(128 + i, x, y + 1)
	pal(11, 11)
	--print(i,x+1,y+3,39)
	print(infostring, 1 + x + w - (#infostring * 5), y + h + 2, 11)
	line(x, y + h + 11, x + w, y + h + 11, 11)
	if mouseWithinRect(x, y, w, h + 11) then
		tooltip = i
	end
end

function drawComponentInfo(i, x, y)
	local name = component_types[i].name
	local price = component_types[i].price
	local info = component_types[i].info
	local width = 90
	local height = 48

	rectfill(x + 2, y + 2, x + width + 2, y + height + 2, 1)
	rectfill(x, y, x + width, y + height, 39)
	rect(x, y, x + width, y + height, 38)
	rectfill(x, y, x + width, y + 10, 38)
	print(name, x + 3, y + 2, 7)
	print(info, x + 3, y + 14, 11)
end

:: scripts/helpers.lua
--[[pod_format="raw",created="2024-05-12 07:37:40",modified="2024-05-12 09:17:10",revision=84]]
function every(duration, offset, period)
	local frames = flr(time() * 60)
	local offset = offset or 0
	local period = period or 1
	local offset_frames = frames + offset
	return offset_frames % duration < period
end

function getCanvasVal(x, y)
	local val = nil
	val = canvas.grid[y][x]
	return val
end

function canvasContainsVal(table, value)
	for y = 1, #table do
		if count(table[y], value) > 0 then
			return true
		end
	end
	return nil
end

function init2dTable(w, h, val)
	local val = val or 0
	local table = {}
	for y = 1, h do
		table[y] = {}
		for x = 1, w do
			table[y][x] = val
		end
	end
	return table
end

function rotateMatrix(m)
	local rotated = {}
	for c, m_1_c in ipairs(m[1]) do
		local col = { m_1_c }
		for r = 2, #m do
			col[r] = m[r][c]
		end
		table.insert(rotated, 1, col)
	end
	return rotated
end

--helper function to copy a whole table (recursively)
function tablecopy(orig)
	local orig_type = type(orig)
	local copy
	if orig_type == 'table' then
		copy = {}
		for orig_key, orig_value in next, orig, nil do
			copy[tablecopy(orig_key)] = tablecopy(orig_value)
		end
		setmetatable(copy, tablecopy(getmetatable(orig)))
	else -- number, string, boolean, etc
		copy = orig
	end
	return copy
end

function updateMouse()
	mouse_val.x, mouse_val.y, mouse_val.button = mouse()
end

function mouseWithinCanvas()
	if mouse_val.x > canvas.x
		and mouse_val.x < canvas.x + grid_size * canvas.grid_width
		and mouse_val.y > canvas.y
		and mouse_val.y < canvas.y + grid_size * canvas.grid_height then
		return true
	else
		return false
	end
end

function mouseWithinRect(x, y, w, h)
	if mouse_val.x > x
		and mouse_val.x < x + w
		and mouse_val.y > y
		and mouse_val.y < y + h then
		return true
	else
		return false
	end
end

:: scripts/workbench_draw.lua
--[[pod_format="raw",created="2024-05-12 07:45:28",modified="2024-05-12 09:17:10",revision=92]]
function drawWorkbench()
	drawCanvas()
	drawComponentBox(8, 64, 82, 200)
	drawToolbox(8, 16, 82, 42)
	drawTotal(400, 200)

	--draws the component under the mouse if one is held
	if mouse_mode[2] and held_component.name ~= "empty" then
		spr(held_component.sprite + held_component.rotations, mouse_val.x - 4, mouse_val.y - 4)
		drawComponentInfo(held_component.type, 100, 16)
	end
	if mouse_mode[1] and tooltip then
		drawComponentInfo(tooltip, mouse_val.x + 6, mouse_val.y)
	end
	--	drawWindowMetal(8,8,160,24)
	--	spr(109,13,13)
end

function drawCanvas()
	--bg
	rectfill(0, 0, 480, 270, 63)
	local offset_x, offset_y = canvas.x, canvas.y

	drawBlueprintGroups(offset_x, offset_y)
	--drawCanvasGroups(offset_x,offset_y)

	drawCheckerBoard(offset_x, offset_y, canvas.grid_width, canvas.grid_height, 16, 63)

	drawPlacedComponents()
	drawEmpties()

	if proposed_placement and (mouse_mode[2] or mouse_mode[3]) then
		for x = 0, canvas.grid_width - 1 do
			for y = 0, canvas.grid_height - 1 do
				local cell = proposed_placement.collider[y + 1][x + 1]

				local debugcell = canvas.grid[y + 1][x + 1]
				--	print(debugcell,offset_x+x*grid_size,offset_y+y*grid_size,debugcell)

				if cell > 0 then
					local color = 7
					if cell == 2 then
						color = 8
					elseif can_place == false then
						color = 4
					end
					pal(7, color)
					spr(0, offset_x + x * grid_size, offset_y + y * grid_size)
					--	print(held_component_id,offset_x+x*grid_size,offset_y+y*grid_size,18)
				end
			end
		end
		pal(7, 7)
	end
end

function drawPlacedComponents()
	for i in all(placed_components) do
		i:draw(i)
	end
end

function drawEmpties()
	for y = 0, canvas.grid_height - 1 do
		for x = 0, canvas.grid_width - 1 do
			if canvas.grid[y + 1][x + 1] == 1 then
				spr(2,
					canvas.x + (x * grid_size),
					canvas.y + (y * grid_size)
				)
			end
		end
	end
end

function drawBlueprintGroups(offset_x, offset_y)
	for i = 1, #blueprint.x do
		local groups = blueprint.x[i].groups
		local height = 9 * #groups
		for j = 1, #groups do
			local clr = 7
			if blueprint.x[i].eval[j] then
				clr = 5
			else
				clr = 6
			end
			local lx = 5 + offset_x + (i - 1) * grid_size
			local ly = 6 + offset_y - grid_size - height + 9 * j
			print(groups[j], lx, ly, clr)
		end
	end
	for i = 1, #blueprint.y do
		local groups = blueprint.y[i].groups
		local width = 8 * #groups
		for j = 1, #groups do
			local clr = 7
			if blueprint.y[i].eval[j] then
				clr = 5
			else
				clr = 6
			end
			local lx = 5 + offset_x - grid_size - width + 8 * j
			local ly = 5 + offset_y + (i - 1) * grid_size
			print(groups[j], lx, ly, clr)
		end
	end
end

function drawCanvasGroups(offset_x, offset_y)
	for i = 1, canvas.grid_width do
		local groups = canvas.groups.x[i]
		local height = 9 * #groups
		for j = 1, #groups do
			local clr = 12
			local lx = 5 + offset_x + (i - 1) * grid_size
			local ly = 6 + offset_y - grid_size - height + 9 * j
			print(groups[j], lx, ly, clr)
		end
	end
	for i = 1, canvas.grid_height do
		local groups = canvas.groups.y[i]
		local width = 8 * #groups
		for j = 1, #groups do
			local clr = 12
			local lx = 5 + offset_x - grid_size - width + 8 * j
			local ly = 5 + offset_y + (i - 1) * grid_size
			print(groups[j], lx, ly, clr)
		end
	end
end

function drawTotal(x, y)
	local total = "0" .. cost_of_components
	drawWindowMetal(x - 3, y - 3, 64, 18)
	spr(75, x, y)
	for i = 1, #total do
		local nr = 0 .. sub(total, i, i)
		spr(65 + nr, x + (7 * i), y)
	end
end

function drawComponentBox(x, y, width, height)
	drawWindowMetal(x, y, width, height)

	clip(x + 3, y + 3, width - 3, height - 6)
	--camera(0,30)
	--toolbox with component types
	local y_offset = 4
	for i = 1, #component_types do
		drawComponentInBox(i, x + 4, y + y_offset, width - 9)
		y_offset += 16 + component_types[i].height * grid_size
	end
	clip()
end

function drawComponentInBox(i, x, y, w)
	local h = component_types[i].height * grid_size
	local infostring = placed_component_amount[i] .. " x " .. "$" .. component_types[i].price
	drawCheckerBoard(x + 7, y, component_types[i].width, component_types[i].height, 38, 39)
	spr(component_types[i].sprite, x + 7, y)

	spr(111, x - 1, y)
	pal(11, 39)
	spr(128 + i, x, y + 1)
	pal(11, 11)
	--print(i,x+1,y+3,39)
	print(infostring, 1 + x + w - (#infostring * 5), y + h + 2, 11)
	line(x, y + h + 11, x + w, y + h + 11, 11)
	if mouseWithinRect(x, y, w, h + 11) then
		tooltip = i
	end
end

function drawToolbox(x, y, width, height)
	drawWindowMetal(x, y, width, height)
	local current_tool = nil
	if mouse_mode[1] then
		current_tool = "Info"
	elseif mouse_mode[2] then
		current_tool = "Place"
	elseif mouse_mode[3] then
		current_tool = "Mark"
	elseif mouse_mode[4] then
		current_tool = "Erase"
	end
	print("Tool:" .. current_tool, x + 3, y + 5, 11)
	drawToolButton(x + 5, y + 15, 115, mouse_mode[1], 124)
	if current_tool == "Mark" then
		drawToolButton(x + 24, y + 15, 117, mouse_mode[3], 125)
	else
		drawToolButton(x + 24, y + 15, 118, mouse_mode[2], 125)
	end
	drawToolButton(x + 43, y + 15, 116, mouse_mode[4], 126)
	drawToolButton(x + 62, y + 15, 119, nil, 127)
end

function drawToolButton(x, y, sprite, mode, key)
	local button_sprite = 102
	if mode then button_sprite = 104 end
	spr(button_sprite, x, y)
	if mode then
		pal(11, 39)
		pal(39, 11)
	end
	spr(sprite, x + 4, y + 4)
	pal(11, 11)
	pal(39, 39)
	spr(key, x, y + 17)
	--print(key,x-1,y+15,11)
end

:: scripts/workbench_init.lua
--[[pod_format="raw",created="2024-05-12 07:41:09",modified="2024-05-12 09:17:10",revision=76]]
function initWorkbench()
	--set up a canvas for the puzzle
	current_level = 1
	blueprint = setupBlueprint(blueprint_library[current_level])
	initCanvas()


	mark_empty_component =
	{
		name = "empty",
		width = 1,
		height = 1,
		sprite = 2,
		rotations = 0,
		max_rot = 1,
		price = 0,
		collider = { { 1 }
		}
	}
	--instances a a component from the library and gives it an id
	held_component = tablecopy(component_types[1])
	held_component_id = 2 --starts on 2, because 1 is reserved for marked empty

	--these two are used to evaluate and visualise if a component can be placed
	proposed_placement = nil
	can_place = false

	--placed components is a list of every saved componenet and their position
	placed_components = {}
	placed_component_amount = countComponents()

	mouse_mode = { false, false, false, false } -- info, place, empty, erase
	mouseMode(1)
	evaluateGrid()
	debug_delete = 0
	cost_of_components = 0
end

function initBlueprints()
	blueprint_library = initBlueprintLibrary({ 1, 2, 3 })
end

function initBlueprintLibrary(levels)
	local library = {
	}

	library[1] = generateRandomBlueprint(5, 5, 25, 3)

	for i = 1, #levels do
		local sprite = get_spr(256 + i)
		add(library, convertSpriteToGroups(sprite))
	end

	return library
end

function generateRandomBlueprint(width, height, filled_cells_target, size_variance)
	local variance = size_variance or 0
	local width = flr(width + rnd(variance + 1))
	local height = flr(height + rnd(variance + 1))
	local filled_cells_target = filled_cells_target or flr((width * height) / 2)

	--create empty userdata
	local table = userdata(i8, width, height)
	for y = 0, height - 1 do
		for x = 0, width - 1 do
			table[x + y * width] = 0
		end
	end

	--go over randomly and add cells until meet target. RISKY!
	local filled_cells = 0
	while filled_cells < filled_cells_target do
		local x = flr(rnd(width))
		local y = flr(rnd(height))
		if table[x + y * width] == 0 then
			table[x + y * width] = 1
			filled_cells += 1
		end
	end

	--generate the blueprint groups
	local bp = { x = {}, y = {} }
	for y = 1, height do
		bp.y[y] = generateGroups(table, width, nil, y)
	end
	for x = 1, width do
		bp.x[x] = generateGroups(table, height, x, nil)
	end
	return bp
end

function convertSpriteToGroups(sprite)
	--make a table of groups
	local bp = { x = {}, y = {} }
	for y = 1, sprite:height() do
		bp.y[y] = generateGroups(sprite, sprite:width(), nil, y)
	end
	for x = 1, sprite:width() do
		bp.x[x] = generateGroups(sprite, sprite:height(), x, nil)
	end
	return bp
end

function generateGroups(sprite, length, x, y)
	-- list of groups
	local groups = {}
	local group = 0
	for i = 1, length do
		--if given a x value, the other is the iteration and vice versa
		local lx = x or i
		local ly = y or i
		--offset due to sprites being userdata
		lx -= 1
		ly -= 1
		if sprite:get(lx, ly) >= 1 and i == length then
			--if the cell is filled and at the end of the row, add group to list
			group += 1
			add(groups, group)
		elseif sprite:get(lx, ly) >= 1 then
			--if the cell is filled, increase group size
			group += 1
		elseif sprite:get(lx, ly) == 0 and group > 0 then
			--if the cell is empty and the group is at least 1, then add group to list and reset
			add(groups, group)
			group = 0
		elseif #groups == 0 and group == 0 and i == length then
			--if the cell is empty and the list is empty and
			--at the end of the row, add one 0 to list
			add(groups, 0)
		end
	end

	return groups
end

function setupBlueprint(bp)
	local blueprint = {
		x = {},
		y = {}
	}
	for i = 1, #bp.x do
		blueprint.x[i] = {
			eval = {},
			groups = bp.x[i]
		}
	end
	for i = 1, #bp.y do
		blueprint.y[i] = {
			eval = {},
			groups = bp.y[i]
		}
	end
	return blueprint
end

function initCanvas()
	canvas = {
		x = 0,
		y = 0,
		grid_width = #blueprint.x,
		grid_height = #blueprint.y,
		groups = {
			x = {},
			y = {}
		}
	}
	--canvas grid is used for storing where components are placed
	canvas.grid = init2dTable(canvas.grid_width, canvas.grid_height)

	--set offset based on width and height
	canvas.x = 240 - ((canvas.grid_width * grid_size) / 2) + 44
	canvas.y = 135 - ((canvas.grid_height * grid_size) / 2)

	--generate empty groups to later evaluate with
	for i = 1, canvas.grid_width do
		canvas.groups.x[i] = {}
	end
	for i = 1, canvas.grid_height do
		canvas.groups.y[i] = {}
	end
end

:: scripts/workbench_update.lua
--[[pod_format="raw",created="2024-05-12 09:10:20",modified="2024-05-12 09:31:20",revision=22]]
function updateWorkbench()
	if keyp("q") then
		mouseMode(1) --info
	end
	if keyp("w") and not mouse_mode[2] then
		mouseMode(2) --place
	elseif keyp("w") then
		mouseMode(3) --mark empty
	end
	if keyp("e") then
		mouseMode(4) --erase
	end
	if keyp("r") and mouse_mode[2] then
		rotateComponent()
	end

	-- get tooltip info from placed component
	if mouse_mode[1] and mouseWithinCanvas() then
		local mouse_x, mouse_y = mouse_val.x - canvas.x, mouse_val.y - canvas.y
		local mouse_cell_x = ceil(mouse_x / grid_size)
		local mouse_cell_y = ceil(mouse_y / grid_size)
		local cell_id = getCanvasVal(mouse_cell_x, mouse_cell_y)
		if cell_id > 1 then --ignore if marked empty
			for i in all(placed_components) do
				if i.id == cell_id then
					tooltip = i.type
					break
				end
			end
		end
	end

	if mouse_mode[2] and mouse_val.button == 2 and every(8) then --rotate
		rotateComponent()
	end

	for i = 1, #component_types do --hot switch component
		if keyp("" .. i) then
			held_component = tablecopy(component_types[i])
			mouseMode(2)
		end
	end


	if mouse_mode[4] and mouse_val.button == 1 and mouseWithinCanvas() then --erase
		eraseComponent()
	end

	if (mouse_mode[2] or mouse_mode[3]) and held_component then --place
		checkPlacement()
		if can_place and mouse_val.button == 1 then
			if mouse_mode[3] then
				placeEmpty()
			else
				placeComponent()
			end
		end
	end
end

function checkPlacement()
	-- only bother if within canvas bounds
	if mouseWithinCanvas() then
		--offset to canvas origo
		local mouse_x, mouse_y = mouse_val.x - canvas.x, mouse_val.y - canvas.y
		local mouse_cell_x = flr(mouse_x / grid_size)
		local mouse_cell_y = flr(mouse_y / grid_size)

		local component = nil
		if mouse_mode[2] then
			component = held_component
		elseif mouse_mode[3] then
			component = mark_empty_component
		end
		if component == nil then return end

		--creates a table based on canvas
		local proposed_placement_collider = init2dTable(canvas.grid_width, canvas.grid_height)
		--places the held component on it offset by where the mouse is
		can_place = true
		for x = 1, component.width do
			for y = 1, component.height do
				local held_cell = component.collider[y][x]
				local canvas_cell = 0
				if mouse_cell_y + y <= canvas.grid_height and
					mouse_cell_x + x <= canvas.grid_width then
					canvas_cell = canvas.grid[mouse_cell_y + y][mouse_cell_x + x]
					if held_cell > 0 and canvas_cell > 0 then
						--can't place if held cell is not empty and canvas cell is not empty
						can_place = false
						--2 means overlap
						proposed_placement_collider[mouse_cell_y + y][mouse_cell_x + x] = 2
					elseif held_cell > 0 then
						--1 means ok!
						proposed_placement_collider[mouse_cell_y + y][mouse_cell_x + x] = 1
					end
				else
					--can't place if outside of bounds
					can_place = false
				end
			end
		end
		--set proposed placement
		proposed_placement = {
			x = mouse_cell_x,
			y = mouse_cell_y,
			collider = proposed_placement_collider
		}
		--checks if there is collision and sets can_place
	else
		proposed_placement = nil
		can_place = false
	end
end

function placeEmpty()
	--offset to canvas origo
	local mouse_x, mouse_y = mouse_val.x - canvas.x, mouse_val.y - canvas.y
	local mouse_cell_x = flr(mouse_x / grid_size) + 1
	local mouse_cell_y = flr(mouse_y / grid_size) + 1
	canvas.grid[mouse_cell_y][mouse_cell_x] = 1
end

function placeComponent()
	--offset to canvas origo
	local mouse_x, mouse_y = mouse_val.x - canvas.x, mouse_val.y - canvas.y
	local mouse_cell_x = flr(mouse_x / grid_size)
	local mouse_cell_y = flr(mouse_y / grid_size)
	--sets canvas grid cells to held component
	for x = 1, held_component.width do
		for y = 1, held_component.height do
			local cell = held_component.collider[y][x]
			if cell > 0 then
				canvas.grid[mouse_cell_y + y][mouse_cell_x + x] = held_component_id
			end
		end
	end
	local placed_component = tablecopy(held_component)
	placed_component.x = mouse_cell_x * grid_size + canvas.x
	placed_component.y = mouse_cell_y * grid_size + canvas.y
	placed_component.id = held_component_id
	add(placed_components, placed_component)
	held_component_id += 1
	evaluateGrid()
	costOfComponents = evaluateCost()
	placed_component_amount = countComponents()
end

function evaluateCost()
	local total = 0
	for i in all(placed_components) do
		total += i.price
	end
	return total
end

function rotateComponent()
	held_component.width, held_component.height = held_component.height, held_component.width
	held_component.rotations = (held_component.rotations + 1) % held_component.max_rot
	held_component.collider = rotateMatrix(held_component.collider)
end

function updateGroups()
	for i = 1, #blueprint.y do
		canvas.groups.y[i] = updateCanvasGroup(canvas.grid_width, nil, i)
	end
	for i = 1, #blueprint.x do
		canvas.groups.x[i] = updateCanvasGroup(canvas.grid_height, i, nil)
	end
end

function evaluateGrid()
	updateGroups()

	for i = 1, #blueprint.x do
		blueprint.x[i].eval = evaluateGroup(blueprint.x[i].groups, canvas.groups.x[i])
	end
	for i = 1, #blueprint.y do
		blueprint.y[i].eval = evaluateGroup(blueprint.y[i].groups, canvas.groups.y[i])
	end
end

function evaluateGroup(bp_group, c_group)
	local eval = {}
	for i = 1, #bp_group do
		local g = c_group[i] or 0
		if bp_group[i] == g then
			add(eval, true)
		else
			add(eval, false)
		end
	end
	return eval
end

function updateCanvasGroup(length, x, y)
	-- list of groups for the canvas
	local canvas_groups = {}
	local group = 0
	for i = 1, length do
		--if given a x value, the other is the iteration and vice versa
		local lx = x or i
		local ly = y or i
		if canvas.grid[ly][lx] >= 2 and i == length then
			--if the cell is filled and at the end of the row, add group to list
			group += 1
			add(canvas_groups, group)
		elseif canvas.grid[ly][lx] >= 2 then
			--if the cell is filled, increase group size
			group += 1
		elseif canvas.grid[ly][lx] <= 1 and group > 0 then
			--if the cell is empty and the group is at least 1, then add group to list and reset
			add(canvas_groups, group)
			group = 0
		elseif #canvas_groups == 0 and group == 0 and i == length then
			--if the cell is empty and the list is empty and at the end of the row, add one 0 to list
			add(canvas_groups, group)
		end
	end

	return canvas_groups
end

function eraseComponent()
	--offset to canvas origo
	local mouse_x, mouse_y = mouse_val.x - canvas.x, mouse_val.y - canvas.y
	local mouse_cell_x = ceil(mouse_x / grid_size)
	local mouse_cell_y = ceil(mouse_y / grid_size)

	local id = getCanvasVal(mouse_cell_x, mouse_cell_y)
	if id > 0 then
		debugDelete = id
	end
	if id > 1 then
		deleteCellsFromCanvas(id)
		deleteComponentFromPlacedComponents(id)
	elseif id == 1 then
		canvas.grid[mouse_cell_y][mouse_cell_x] = 0
	end

	evaluateGrid()
	costOfComponents = evaluateCost()
	placed_component_amount = countComponents()
end

function deleteCellsFromCanvas(id)
	for y = 1, canvas.grid_height do
		for x = 1, canvas.grid_width do
			if canvas.grid[y][x] == id then
				canvas.grid[y][x] = 0
			end
		end
	end
end

function deleteComponentFromPlacedComponents(id)
	--find the component with the right id, then delete it
	for i in all(placed_components) do
		if i.id == id then
			del(placed_components, i)
			return
		end
	end
end

function mouseMode(m) --info, place, mark empty, erase
	local cursor_id = 119 + m
	local cur = get_spr(cursor_id)
	window { cursor = cur }
	for i = 1, #mouse_mode do
		local v = false
		if i == m then v = true end
		mouse_mode[i] = v
	end
end

function countComponents()
	local list = {}
	for i = 1, #component_types do
		local count = 0
		for j = 1, #placed_components do
			if placed_components[j].name == component_types[i].name then
				count += 1
			end
		end
		list[i] = count
	end
	return list
end

:: scripts/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTI4IDEyOjUxOjEyIixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscmV2aXNpb249Mzc1MF1dbHo0ABIBAADCCQAA8CdweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUP
Fg8XEwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8t
Dy4PLxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AA--8P8BAOv-J1oBEAYP
IBABIAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAA--_6H-8B
AMy-6A9AAA1A--_w8HAKAP--ZB--AQD-mVD-----IA==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Iixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIsc3RvcmVkPSIyMDI0LTA0LTE0IDA3OjU2OjI4Il1d
:: main.lua
--[[pod_format="raw",created="2024-05-13 17:47:58",modified="2024-05-13 17:50:52",revision=7]]
cd '/source/puzzlegame/'
include 'main.lua'
:: manual.txt
--[[pod_format="raw",created="2024-04-27 07:29:41",modified="2024-04-27 07:29:42",revision=1]]

:: todo.txt
--[[pod_format="raw",created="2024-05-04 12:03:47",modified="2024-05-05 08:23:41",revision=426]]
#TODO
- 	tooltray
	[] scrollable
	[] choose by clicking
	[] component costs
	[] component preview / tooltip
- 	tools
	[x] tool buttons
	[x] separate mark_empty from place completely
-	components
	[] special abilities
-	screens
	[] choose blueprint screen
	[] main menu
	[] game screen
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA0LTIwIDEwOjA0OjMzIixtb2RpZmllZD0iMjAyNS0w
Mi0wNCAxMjo1MzowNyIscnVudGltZT0xMixzdG9yZWQ9IjIwMjQtMDQtMTQgMTU6MTA6MTIiLHdv
cmtzcGFjZXM9e3tsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0
aW9uPSJtYXAvYmx1ZXByaW50cy90ZXN0Lm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlv
bj0ibWFwL2JsdWVwcmludHMvdGVzdDIubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9u
PSJtYXAvYmx1ZXByaW50cy90ZXN0My5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249
Im1hcC9ibHVlcHJpbnRzL21lZ2EubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJt
YXAvYmx1ZXByaW50cy90dXRvcmlhbC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249
InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9LHtsb2NhdGlvbj0icGFsLzAucGFsIix3b3Jr
c3BhY2VfaW5kZXg9N319XV0=
:: [eoc]
